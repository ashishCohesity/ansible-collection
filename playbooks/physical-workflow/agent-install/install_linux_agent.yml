# => Cohesity Agent Management
# =>
# => Collection: cohesity.dataprotect
# =>

# => Install the Cohesity Agent on each Linux host
# => specified in the Ansible inventory
# =>
---
- hosts: linux
  vars:
    state: present

    firewall_command: "--zone=public --permanent"


  # => We need to gather facts to determine the OS type of
  # => the machine
  gather_facts: true
  become: true
  collections:
    - cohesity.dataprotect
  tasks:
    # Alert: Don't edit these tasks.
    - name: Install Prerequisite Packages for CentOS or RedHat
      action: >
        {{ ansible_pkg_mgr }} name="wget,rsync,lsof,lvm2,nfs-utils" state=present
      when:
        - ansible_distribution == "CentOS" or ansible_distribution == "RedHat"
        - state == "present"
        - install_dependencies | default(false)
      tags: always

    - name: Install Prerequisite Packages for Ubuntu
      action: >
        {{ ansible_pkg_mgr }} name="wget,rsync,lsof,lvm2,nfs-common" state=present
      when:
        - ansible_distribution == "Ubuntu"
        - state == "present"
        - install_dependencies | default(false)
      tags: always

    - name: Install Prerequisite Packages for OracleLinux
      action: >
        {{ ansible_pkg_mgr }} name="wget,rsync,lsof,lvm2,nfs-utils" state=present
      when:
        - ansible_distribution == "OracleLinux"
        - state == "present"
        - install_dependencies | default(false)
      tags: always

    - name: Install Prerequisite Packages for SLES
      action: >
        {{ ansible_pkg_mgr }} name="wget,rsync,lsof,lvm2,libcap-progs" state=present
      when:
        - ansible_distribution == "SLES"
        - state == "present"
        - install_dependencies | default(false)
      tags: always

    - name: Install Prerequisite Packages for AIX
      action: >
        {{ ansible_pkg_mgr }} name="wget,rsync" state=present
      when:
        - ansible_distribution == "AIX"
        - state == "present"
        - install_dependencies | default(false)
      tags: always

    - name: Check if firewall is enabled
      command: "firewall-cmd --state"
      ignore_errors: true
      register: firewall_status
      when:
        - (ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "SLES") and state == "present" and {{ check_firewall_rules | default(false) }}
        - ansible_distribution == "Ubuntu" and state == "present" and {{ check_firewall_rules | default(false) }}
      tags: always

    - name: Enable tcp {{ port | default(50051) }}
      command: "firewall-cmd {{ firewall_command }} --add-{{ port | default(50051) }} {{ {{ port | default(50051) }} }}/tcp"
      when:
        - (ansible_distribution == "CentOS" or ansible_distribution == "RedHat" or ansible_distribution == "SLES") and state == "present" and {{ check_firewall_rules | default(false) }} and firewall_status.rc == 0
        - ansible_distribution == "Ubuntu" and state == "present" and {{ check_firewall_rules | default(false) }} and firewall_status.rc == 0
      tags: always

    - name: Find Linux agent installer path
      set_fact:
        installer_src: "{{ server_path }}/{{ item.file.Filename }}"
        installer_dest: "{{ dest_path }}{{ item.file.Filename }}"
      loop: "{{ data }}"
      when:
        - item.file.Hostenv == "Linux"
        - >
          (
            (item.file.LinuxPkgType == "kScript" and item.file.AgentType == "" and native_package == false) or
            (item.file.LinuxPkgType == "kRPM" and ansible_distribution in ['CentOS', 'OracleLinux', 'Rocky'] and native_package == true) or
            (item.file.LinuxPkgType == "kSuseRPM" and ansible_distribution == "SLES" and native_package == true) or
            (item.file.LinuxPkgType == "kDEB" and ansible_distribution == "Ubuntu" and native_package == true) or
            (item.file.LinuxPkgType == "kPowerPCRPM" and ansible_distribution == "RedHat" and native_package == true)
          )

    - name: Copy Linux agent installer
      ansible.builtin.copy:
        src: "{{ installer_src }}"
        dest: "{{ installer_dest }}"
      when: installer_src is defined and installer_dest is defined

    - name: "Cohesity agent: Set Agent to state of present"
      cohesity_agent:
        cluster: "{{ cohesity_server }}"
        username: "{{ cohesity_username }}"
        password: "{{ cohesity_password }}"
        validate_certs: "{{ cohesity_validate_certs }}"
        state: "{{ state | default('present') }}"
        create_user: "{{ create_user | default(false) }}"
        native_package: "{{ native_package | default(false) }}"
        operating_system: "{{ ansible_distribution }}"
        installer_path: "{{ installer_dest }}"
      when: installer_src is defined and installer_dest is defined