# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from apollo.mr.stub import rpc_service_pb2 as apollo_dot_mr_dot_stub_dot_rpc__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apollo/mr/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """----------------------------------------------------------------------------
    RPC service (used by both Master and Slave).
    ----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryHardwareConfig = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/QueryHardwareConfig',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigResult.FromString,
                _registered_method=True)
        self.UpdateResourceUsage = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/UpdateResourceUsage',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageResult.FromString,
                _registered_method=True)
        self.QuerySlaveState = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/QuerySlaveState',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateResult.FromString,
                _registered_method=True)
        self.StartShard = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/StartShard',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardResult.FromString,
                _registered_method=True)
        self.GarbageCollect = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/GarbageCollect',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectResult.FromString,
                _registered_method=True)
        self.FetchData = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/FetchData',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataResult.FromString,
                _registered_method=True)
        self.NotifySlaveEvent = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/NotifySlaveEvent',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventResult.FromString,
                _registered_method=True)
        self.SendStats = channel.unary_unary(
                '/cohesity.apollo.mr.stub.RpcService/SendStats',
                request_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsArg.SerializeToString,
                response_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """----------------------------------------------------------------------------
    RPC service (used by both Master and Slave).
    ----------------------------------------------------------------------------

    """

    def QueryHardwareConfig(self, request, context):
        """--------------------------------------------------------------------------
        Requests sent by Master to Slaves.
        --------------------------------------------------------------------------

        Query the hardware configuration of a Slave. This RPC is sent by Master to
        a Slave every time it restarts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateResourceUsage(self, request, context):
        """Reconfigure the resource usage of a Slave. This RPC is sent by Master to a
        Slave (a) every time it restarts and (b) every time there's an update to
        the operation parameters (Observer).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySlaveState(self, request, context):
        """Query the state of a Slave. The main information returned is the state
        of the Shards running on the Slave. Master issues this request to all
        Slaves periodically (though typically not all at the same time). In
        addition, it may issue this request to a particular Slave immediately upon
        receiving a NotifySlaveEvent RPC from that Slave.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartShard(self, request, context):
        """Start running a Shard on a Slave.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GarbageCollect(self, request, context):
        """Delete the data belonging to all Shards except the ones given in the
        argument. Master must not schedule any new Shards on this Slave while
        this request is outstanding - otherwise, Slave will reject the request
        with error kInvalid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchData(self, request, context):
        """--------------------------------------------------------------------------
        Requests sent by Slaves to other Slaves.
        --------------------------------------------------------------------------

        Fetch a chunk of data produced by a Shard from a Slave.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifySlaveEvent(self, request, context):
        """--------------------------------------------------------------------------
        Requests sent by Slaves to Master.
        --------------------------------------------------------------------------

        Indicate to Master that some event happended on the Slave - e.g., some
        Shards finished. This can be used by Master to immediately issue a
        QuerySlaveState request, for example.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStats(self, request, context):
        """Send some stats to the Master node. Note that although the destination of
        this RPC is always the Master node, Master itself does not process this
        RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryHardwareConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryHardwareConfig,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigResult.SerializeToString,
            ),
            'UpdateResourceUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateResourceUsage,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageResult.SerializeToString,
            ),
            'QuerySlaveState': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySlaveState,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateResult.SerializeToString,
            ),
            'StartShard': grpc.unary_unary_rpc_method_handler(
                    servicer.StartShard,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardResult.SerializeToString,
            ),
            'GarbageCollect': grpc.unary_unary_rpc_method_handler(
                    servicer.GarbageCollect,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectResult.SerializeToString,
            ),
            'FetchData': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchData,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataResult.SerializeToString,
            ),
            'NotifySlaveEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifySlaveEvent,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventResult.SerializeToString,
            ),
            'SendStats': grpc.unary_unary_rpc_method_handler(
                    servicer.SendStats,
                    request_deserializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsArg.FromString,
                    response_serializer=apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.apollo.mr.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.apollo.mr.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """----------------------------------------------------------------------------
    RPC service (used by both Master and Slave).
    ----------------------------------------------------------------------------

    """

    @staticmethod
    def QueryHardwareConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/QueryHardwareConfig',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QueryHardwareConfigResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateResourceUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/UpdateResourceUsage',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.UpdateResourceUsageResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuerySlaveState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/QuerySlaveState',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.QuerySlaveStateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartShard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/StartShard',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.StartShardResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GarbageCollect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/GarbageCollect',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.GarbageCollectResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/FetchData',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.FetchDataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifySlaveEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/NotifySlaveEvent',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.NotifySlaveEventResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.apollo.mr.stub.RpcService/SendStats',
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsArg.SerializeToString,
            apollo_dot_mr_dot_stub_dot_rpc__service__pb2.SendStatsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
