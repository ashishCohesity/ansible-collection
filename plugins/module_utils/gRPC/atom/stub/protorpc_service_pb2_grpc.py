# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from atom.base import atom_pb2 as atom_dot_base_dot_atom__pb2
from atom.stub import protorpc_service_pb2 as atom_dot_stub_dot_protorpc__service__pb2
from atom.stub import rpc_service_args_pb2 as atom_dot_stub_dot_rpc__service__args__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in atom/stub/protorpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ProtoRpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReplicateEvents = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/ReplicateEvents',
                request_serializer=atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsArg.SerializeToString,
                response_deserializer=atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsResult.FromString,
                _registered_method=True)
        self.AllocateRemoteNode = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/AllocateRemoteNode',
                request_serializer=atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeArg.SerializeToString,
                response_deserializer=atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeResult.FromString,
                _registered_method=True)
        self.RegisterEntity = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/RegisterEntity',
                request_serializer=atom_dot_base_dot_atom__pb2.RegisterEntityArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.RegisterEntityResult.FromString,
                _registered_method=True)
        self.UnregisterEntity = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/UnregisterEntity',
                request_serializer=atom_dot_base_dot_atom__pb2.UnregisterEntityArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.UnregisterEntityResult.FromString,
                _registered_method=True)
        self.GetEntityManagerNode = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/GetEntityManagerNode',
                request_serializer=atom_dot_base_dot_atom__pb2.GetEntityManagerNodeArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.GetEntityManagerNodeResult.FromString,
                _registered_method=True)
        self.GetRegisteredEntities = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/GetRegisteredEntities',
                request_serializer=atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesResult.FromString,
                _registered_method=True)
        self.GetDataEvents = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/GetDataEvents',
                request_serializer=atom_dot_base_dot_atom__pb2.GetDataEventsArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.GetDataEventsResult.FromString,
                _registered_method=True)
        self.AddDataEvents = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/AddDataEvents',
                request_serializer=atom_dot_base_dot_atom__pb2.AddDataEventsArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.AddDataEventsResult.FromString,
                _registered_method=True)
        self.ClearDataEvents = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/ClearDataEvents',
                request_serializer=atom_dot_base_dot_atom__pb2.ClearDataEventsArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.ClearDataEventsResult.FromString,
                _registered_method=True)
        self.SwitchEpoch = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/SwitchEpoch',
                request_serializer=atom_dot_base_dot_atom__pb2.SwitchEpochArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.SwitchEpochResult.FromString,
                _registered_method=True)
        self.AddOrRemoveRegisteredEntity = channel.unary_unary(
                '/cohesity.atom.stub.ProtoRpcService/AddOrRemoveRegisteredEntity',
                request_serializer=atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityArg.SerializeToString,
                response_deserializer=atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityResult.FromString,
                _registered_method=True)


class ProtoRpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def ReplicateEvents(self, request, context):
        """---------------------------------------------------------------------------
        Remote cluster APIs
        ---------------------------------------------------------------------------

        Call to replicate the event to Rx Atom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateRemoteNode(self, request, context):
        """Allocate Remote atom node. ReplicateEvents RPC will be sent to this atom
        node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterEntity(self, request, context):
        """---------------------------------------------------------------------------
        Atom public APIs
        ---------------------------------------------------------------------------

        Registers an entity with Atom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterEntity(self, request, context):
        """Unregisters an entity from Atom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntityManagerNode(self, request, context):
        """Returns the assigned Atom node for an entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRegisteredEntities(self, request, context):
        """Returns the entities managed by the given node(s) or all nodes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataEvents(self, request, context):
        """Returns data events for given entities.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDataEvents(self, request, context):
        """Adds the given data events for given entities to the existing ones.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearDataEvents(self, request, context):
        """Clears the data events for given entities till the given sequencer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwitchEpoch(self, request, context):
        """Switches epoch for an entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddOrRemoveRegisteredEntity(self, request, context):
        """---------------------------------------------------------------------------
        Atom worker APIs
        ---------------------------------------------------------------------------

        Adds or removes an entity assignment to/from the receiver node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProtoRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReplicateEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateEvents,
                    request_deserializer=atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsArg.FromString,
                    response_serializer=atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsResult.SerializeToString,
            ),
            'AllocateRemoteNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateRemoteNode,
                    request_deserializer=atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeArg.FromString,
                    response_serializer=atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeResult.SerializeToString,
            ),
            'RegisterEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterEntity,
                    request_deserializer=atom_dot_base_dot_atom__pb2.RegisterEntityArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.RegisterEntityResult.SerializeToString,
            ),
            'UnregisterEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterEntity,
                    request_deserializer=atom_dot_base_dot_atom__pb2.UnregisterEntityArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.UnregisterEntityResult.SerializeToString,
            ),
            'GetEntityManagerNode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntityManagerNode,
                    request_deserializer=atom_dot_base_dot_atom__pb2.GetEntityManagerNodeArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.GetEntityManagerNodeResult.SerializeToString,
            ),
            'GetRegisteredEntities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRegisteredEntities,
                    request_deserializer=atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesResult.SerializeToString,
            ),
            'GetDataEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataEvents,
                    request_deserializer=atom_dot_base_dot_atom__pb2.GetDataEventsArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.GetDataEventsResult.SerializeToString,
            ),
            'AddDataEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDataEvents,
                    request_deserializer=atom_dot_base_dot_atom__pb2.AddDataEventsArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.AddDataEventsResult.SerializeToString,
            ),
            'ClearDataEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearDataEvents,
                    request_deserializer=atom_dot_base_dot_atom__pb2.ClearDataEventsArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.ClearDataEventsResult.SerializeToString,
            ),
            'SwitchEpoch': grpc.unary_unary_rpc_method_handler(
                    servicer.SwitchEpoch,
                    request_deserializer=atom_dot_base_dot_atom__pb2.SwitchEpochArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.SwitchEpochResult.SerializeToString,
            ),
            'AddOrRemoveRegisteredEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOrRemoveRegisteredEntity,
                    request_deserializer=atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityArg.FromString,
                    response_serializer=atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.atom.stub.ProtoRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.atom.stub.ProtoRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProtoRpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def ReplicateEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/ReplicateEvents',
            atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsArg.SerializeToString,
            atom_dot_stub_dot_protorpc__service__pb2.ReplicateEventsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateRemoteNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/AllocateRemoteNode',
            atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeArg.SerializeToString,
            atom_dot_stub_dot_rpc__service__args__pb2.AllocateNodeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/RegisterEntity',
            atom_dot_base_dot_atom__pb2.RegisterEntityArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.RegisterEntityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/UnregisterEntity',
            atom_dot_base_dot_atom__pb2.UnregisterEntityArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.UnregisterEntityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEntityManagerNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/GetEntityManagerNode',
            atom_dot_base_dot_atom__pb2.GetEntityManagerNodeArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.GetEntityManagerNodeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRegisteredEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/GetRegisteredEntities',
            atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.GetRegisteredEntitiesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/GetDataEvents',
            atom_dot_base_dot_atom__pb2.GetDataEventsArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.GetDataEventsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddDataEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/AddDataEvents',
            atom_dot_base_dot_atom__pb2.AddDataEventsArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.AddDataEventsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearDataEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/ClearDataEvents',
            atom_dot_base_dot_atom__pb2.ClearDataEventsArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.ClearDataEventsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SwitchEpoch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/SwitchEpoch',
            atom_dot_base_dot_atom__pb2.SwitchEpochArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.SwitchEpochResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddOrRemoveRegisteredEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.atom.stub.ProtoRpcService/AddOrRemoveRegisteredEntity',
            atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityArg.SerializeToString,
            atom_dot_base_dot_atom__pb2.AddOrRemoveRegisteredEntityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
