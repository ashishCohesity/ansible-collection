# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bookkeeper.stub import rpc_service_pb2 as bookkeeper_dot_stub_dot_rpc__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bookkeeper/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrUpdateGroup = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/CreateOrUpdateGroup',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupResult.FromString,
                _registered_method=True)
        self.ReserveGroupId = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/ReserveGroupId',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdResult.FromString,
                _registered_method=True)
        self.RetrieveGroup = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/RetrieveGroup',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupResult.FromString,
                _registered_method=True)
        self.DeleteGroup = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/DeleteGroup',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupResult.FromString,
                _registered_method=True)
        self.AddObjectsToGroup = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/AddObjectsToGroup',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupResult.FromString,
                _registered_method=True)
        self.DeleteObjectsOrSubGroupsFromGroup = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/DeleteObjectsOrSubGroupsFromGroup',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupResult.FromString,
                _registered_method=True)
        self.PublishGroupStats = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/PublishGroupStats',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsResult.FromString,
                _registered_method=True)
        self.GetStorageStats = channel.unary_unary(
                '/cohesity.bookkeeper.stub.RpcService/GetStorageStats',
                request_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsArg.SerializeToString,
                response_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def CreateOrUpdateGroup(self, request, context):
        """Creates/updates a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveGroupId(self, request, context):
        """Reserves a group id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveGroup(self, request, context):
        """Returns the GroupConfigProto of the group whose id has been specified.

        Errors returned:
        kNonExistent: when we could not find the group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Deletes the group whose id has been specified.

        Errors returned:
        kNonExistent: when we could not find the group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddObjectsToGroup(self, request, context):
        """Adds a list of objects, or sub-groups to a group.

        Errors returned:
        kNonExistent: when we could not find the group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteObjectsOrSubGroupsFromGroup(self, request, context):
        """Deletes objects, or sub-groups from a group.

        Errors returned:
        kNonExistent: when we could not find the group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishGroupStats(self, request, context):
        """Publishes stats for a group to bookkeeper_metadata table, and stats
        service.

        Errors returned:
        kNonExistent: when we could not find the group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStorageStats(self, request, context):
        """Generic API to call to retrieve the storage stats for any resource.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrUpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrUpdateGroup,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupResult.SerializeToString,
            ),
            'ReserveGroupId': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveGroupId,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdResult.SerializeToString,
            ),
            'RetrieveGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveGroup,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupResult.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupResult.SerializeToString,
            ),
            'AddObjectsToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddObjectsToGroup,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupResult.SerializeToString,
            ),
            'DeleteObjectsOrSubGroupsFromGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteObjectsOrSubGroupsFromGroup,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupResult.SerializeToString,
            ),
            'PublishGroupStats': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishGroupStats,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsResult.SerializeToString,
            ),
            'GetStorageStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStorageStats,
                    request_deserializer=bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsArg.FromString,
                    response_serializer=bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bookkeeper.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bookkeeper.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def CreateOrUpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/CreateOrUpdateGroup',
            bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.CreateOrUpdateGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReserveGroupId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/ReserveGroupId',
            bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.ReserveGroupIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RetrieveGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/RetrieveGroup',
            bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.RetrieveGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/DeleteGroup',
            bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddObjectsToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/AddObjectsToGroup',
            bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.AddObjectsToGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteObjectsOrSubGroupsFromGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/DeleteObjectsOrSubGroupsFromGroup',
            bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.DeleteObjectsOrSubGroupsFromGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishGroupStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/PublishGroupStats',
            bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.PublishGroupStatsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStorageStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bookkeeper.stub.RpcService/GetStorageStats',
            bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsArg.SerializeToString,
            bookkeeper_dot_stub_dot_rpc__service__pb2.GetStorageStatsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
