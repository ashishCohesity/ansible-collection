# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bridge/base/cloud.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from configs import cluster_config_pb2 as configs_dot_cluster__config__pb2
from util.base import cluster_instance_identifier_pb2 as util_dot_base_dot_cluster__instance__identifier__pb2
from util.base import universal_id_pb2 as util_dot_base_dot_universal__id__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x17\x62ridge/base/cloud.proto\x12\x0f\x63ohesity.bridge\x1a\x1c\x63onfigs/cluster_config.proto\x1a+util/base/cluster_instance_identifier.proto\x1a\x1cutil/base/universal_id.proto\"\xe7\x06\n\x10\x41rchivedLocation\x12/\n\x0b\x61rchive_uid\x18\x01 \x01(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x1b\n\x0f\x62\x61se_archive_id\x18\x02 \x01(\x03:\x02-1\x12\x38\n\x0f\x64\x61ta_object_vec\x18\x05 \x03(\x0b\x32\x1f.cohesity.bridge.ArchivedObject\x12\x43\n\x0cmorphed_info\x18\x06 \x01(\x0b\x32-.cohesity.bridge.ArchivedLocation.MorphedInfo\x12>\n\x08\x64\x61ta_ptr\x18\x03 \x01(\x0b\x32,.cohesity.bridge.ArchiveSnapTreeNodePtrProto\x12\x41\n\x16\x62lob_data_location_vec\x18\x04 \x03(\x0b\x32!.cohesity.bridge.ArchiveDataRange\x1a\x82\x04\n\x0bMorphedInfo\x12\x15\n\robject_prefix\x18\x01 \x01(\x0c\x12\x12\n\nblock_size\x18\x02 \x01(\x03\x12^\n\x11\x63ompression_level\x18\x03 \x01(\x0e\x32\x43.cohesity.configs.ClusterConfigProto.StoragePolicy.CompressionLevel\x12U\n\x0f\x65ncryption_info\x18\x04 \x01(\x0b\x32<.cohesity.bridge.ArchivedLocation.MorphedInfo.EncryptionInfo\x1a\x90\x02\n\x0e\x45ncryptionInfo\x12@\n\x13\x63luster_instance_id\x18\x01 \x01(\x0b\x32#.cohesity.ClusterInstanceIdentifier\x12\x14\n\x0crandom_nonce\x18\x02 \x01(\x0c\x12N\n\x10\x65ncryption_level\x18\x03 \x01(\x0e\x32\x34.cohesity.configs.ClusterConfigProto.EncryptionLevel\x12V\n\x11\x65ncryption_config\x18\x04 \x01(\x0b\x32;.cohesity.configs.ClusterConfigProto.Vault.EncryptionConfig\"z\n\x1b\x41rchiveSnapTreeNodePtrProto\x12.\n\nobject_uid\x18\x01 \x02(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x16\n\x0esegment_offset\x18\x02 \x02(\x03\x12\x13\n\x0b\x64\x61ta_offset\x18\x03 \x01(\x05\"l\n\x15\x43loudChunkFileIdProto\x12\x13\n\tobject_id\x18\x01 \x01(\x03H\x00\x12)\n\x03uid\x18\x02 \x01(\x0b\x32\x1a.cohesity.UniversalIdProtoH\x00\x42\x13\n\x11\x63hunkfileid_oneof\"\xe2\x01\n\x14\x41rchiveChunkPtrProto\x12.\n\nobject_uid\x18\x01 \x01(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x16\n\x0esegment_offset\x18\x02 \x01(\x03\x12\x13\n\x0b\x64\x61ta_offset\x18\x03 \x01(\x05\x12.\n\ndomain_uid\x18\x04 \x01(\x0b\x32\x1a.cohesity.UniversalIdProto\x12=\n\rchunk_file_id\x18\x05 \x01(\x0b\x32&.cohesity.bridge.CloudChunkFileIdProto\"`\n\x16\x41rchiveSegmentPtrProto\x12.\n\nobject_uid\x18\x01 \x02(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x16\n\x0esegment_offset\x18\x02 \x02(\x03\"c\n\x0e\x41rchivedObject\x12.\n\nobject_uid\x18\x01 \x01(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x13\n\x0bobject_name\x18\x02 \x01(\x0c\x12\x0c\n\x04size\x18\x03 \x01(\x03\"u\n\x10\x41rchiveDataRange\x12.\n\nobject_uid\x18\x01 \x01(\x0b\x32\x1a.cohesity.UniversalIdProto\x12\x0e\n\x06offset\x18\x02 \x01(\x03\x12\x0c\n\x04size\x18\x03 \x01(\x03\x12\x13\n\x0bobject_name\x18\x04 \x01(\t\":\n\x12\x43loudObjectIdProto\x12\x11\n\tdomain_id\x18\x01 \x01(\x03\x12\x11\n\tobject_id\x18\x02 \x01(\x03\"?\n\x11\x43loudNodePtrProto\x12\x11\n\tobject_id\x18\x01 \x01(\x03\x12\x17\n\x0fobject_local_id\x18\x02 \x01(\x03\"r\n\x17\x43loudNodePrefixPtrProto\x12:\n\x0e\x63loud_node_ptr\x18\x01 \x01(\x0b\x32\".cohesity.bridge.CloudNodePtrProto\x12\x1b\n\x13\x63loud_object_prefix\x18\x02 \x01(\t\"\x81\x01\n\nLeaseProto\x12\x19\n\x11lessee_cluster_id\x18\x01 \x01(\x03\x12\x18\n\x10network_realm_id\x18\x02 \x01(\x03\x12\x10\n\x08lease_id\x18\x03 \x01(\x03\x12,\n$most_recent_reference_timestamp_secs\x18\x04 \x01(\x03\x42\x15\n\x13\x63om.cohesity.bridge')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'bridge.base.cloud_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\023com.cohesity.bridge'
  _globals['_ARCHIVEDLOCATION']._serialized_start=150
  _globals['_ARCHIVEDLOCATION']._serialized_end=1021
  _globals['_ARCHIVEDLOCATION_MORPHEDINFO']._serialized_start=507
  _globals['_ARCHIVEDLOCATION_MORPHEDINFO']._serialized_end=1021
  _globals['_ARCHIVEDLOCATION_MORPHEDINFO_ENCRYPTIONINFO']._serialized_start=749
  _globals['_ARCHIVEDLOCATION_MORPHEDINFO_ENCRYPTIONINFO']._serialized_end=1021
  _globals['_ARCHIVESNAPTREENODEPTRPROTO']._serialized_start=1023
  _globals['_ARCHIVESNAPTREENODEPTRPROTO']._serialized_end=1145
  _globals['_CLOUDCHUNKFILEIDPROTO']._serialized_start=1147
  _globals['_CLOUDCHUNKFILEIDPROTO']._serialized_end=1255
  _globals['_ARCHIVECHUNKPTRPROTO']._serialized_start=1258
  _globals['_ARCHIVECHUNKPTRPROTO']._serialized_end=1484
  _globals['_ARCHIVESEGMENTPTRPROTO']._serialized_start=1486
  _globals['_ARCHIVESEGMENTPTRPROTO']._serialized_end=1582
  _globals['_ARCHIVEDOBJECT']._serialized_start=1584
  _globals['_ARCHIVEDOBJECT']._serialized_end=1683
  _globals['_ARCHIVEDATARANGE']._serialized_start=1685
  _globals['_ARCHIVEDATARANGE']._serialized_end=1802
  _globals['_CLOUDOBJECTIDPROTO']._serialized_start=1804
  _globals['_CLOUDOBJECTIDPROTO']._serialized_end=1862
  _globals['_CLOUDNODEPTRPROTO']._serialized_start=1864
  _globals['_CLOUDNODEPTRPROTO']._serialized_end=1927
  _globals['_CLOUDNODEPREFIXPTRPROTO']._serialized_start=1929
  _globals['_CLOUDNODEPREFIXPTRPROTO']._serialized_end=2043
  _globals['_LEASEPROTO']._serialized_start=2046
  _globals['_LEASEPROTO']._serialized_end=2175
# @@protoc_insertion_point(module_scope)
