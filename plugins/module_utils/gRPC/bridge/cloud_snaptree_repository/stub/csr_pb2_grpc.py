# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bridge.cloud_snaptree_repository.stub import csr_pb2 as bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bridge/cloud_snaptree_repository/stub/csr_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    RPC service used by both csr server and client.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Write = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/Write',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteResult.FromString,
                _registered_method=True)
        self.FetchCloudObjectIds = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/FetchCloudObjectIds',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsResult.FromString,
                _registered_method=True)
        self.WriteMetadata = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/WriteMetadata',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataResult.FromString,
                _registered_method=True)
        self.DeleteNodes = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/DeleteNodes',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesResult.FromString,
                _registered_method=True)
        self.UndeleteNodes = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/UndeleteNodes',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesResult.FromString,
                _registered_method=True)
        self.TouchOpClock = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/TouchOpClock',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockResult.FromString,
                _registered_method=True)
        self.PutRetention = channel.unary_unary(
                '/cohesity.bridge.csr.stub.RpcService/PutRetention',
                request_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionArg.SerializeToString,
                response_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    RPC service used by both csr server and client.
    """

    def Write(self, request, context):
        """Writes snap tree nodes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCloudObjectIds(self, request, context):
        """Fetch cloud object id for a given key in domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteMetadata(self, request, context):
        """Writes metadata such as archive metadata to a cloud domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNodes(self, request, context):
        """Delete nodes from cloud objects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UndeleteNodes(self, request, context):
        """Undelete nodes from cloud objects which are marked for deletion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TouchOpClock(self, request, context):
        """Touch scribe metadata op clock of cloud objects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutRetention(self, request, context):
        """Update the immutable retention period of a set of cloud objects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteResult.SerializeToString,
            ),
            'FetchCloudObjectIds': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCloudObjectIds,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsResult.SerializeToString,
            ),
            'WriteMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteMetadata,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataResult.SerializeToString,
            ),
            'DeleteNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNodes,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesResult.SerializeToString,
            ),
            'UndeleteNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.UndeleteNodes,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesResult.SerializeToString,
            ),
            'TouchOpClock': grpc.unary_unary_rpc_method_handler(
                    servicer.TouchOpClock,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockResult.SerializeToString,
            ),
            'PutRetention': grpc.unary_unary_rpc_method_handler(
                    servicer.PutRetention,
                    request_deserializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionArg.FromString,
                    response_serializer=bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.csr.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.csr.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    RPC service used by both csr server and client.
    """

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/Write',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchCloudObjectIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/FetchCloudObjectIds',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.FetchCloudObjectIdsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/WriteMetadata',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.WriteMetadataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/DeleteNodes',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.DeleteNodesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UndeleteNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/UndeleteNodes',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.UndeleteNodesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TouchOpClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/TouchOpClock',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.TouchOpClockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutRetention(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.csr.stub.RpcService/PutRetention',
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionArg.SerializeToString,
            bridge_dot_cloud__snaptree__repository_dot_stub_dot_csr__pb2.PutRetentionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
