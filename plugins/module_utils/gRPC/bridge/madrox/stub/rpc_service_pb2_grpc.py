# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bridge.madrox.stub import rpc_service_pb2 as bridge_dot_madrox_dot_stub_dot_rpc__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bridge/madrox/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    RPC service used by both the madrox master and slaves.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScheduleReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ScheduleReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationResult.FromString,
                _registered_method=True)
        self.ScheduleReplicationV2 = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ScheduleReplicationV2',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Arg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Result.FromString,
                _registered_method=True)
        self.CancelReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/CancelReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationResult.FromString,
                _registered_method=True)
        self.PauseReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/PauseReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationResult.FromString,
                _registered_method=True)
        self.UnpauseReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/UnpauseReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationResult.FromString,
                _registered_method=True)
        self.ListReplications = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ListReplications',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsResult.FromString,
                _registered_method=True)
        self.QueryReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/QueryReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationResult.FromString,
                _registered_method=True)
        self.ExpireReplications = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ExpireReplications',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsResult.FromString,
                _registered_method=True)
        self.StartViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/StartViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.FromString,
                _registered_method=True)
        self.CompleteViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/CompleteViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationResult.FromString,
                _registered_method=True)
        self.CheckViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/CheckViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationResult.FromString,
                _registered_method=True)
        self.ResumeViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ResumeViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationResult.FromString,
                _registered_method=True)
        self.CancelViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/CancelViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationResult.FromString,
                _registered_method=True)
        self.PauseViewReplication = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/PauseViewReplication',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationResult.FromString,
                _registered_method=True)
        self.MetadataSlaveBarrier = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/MetadataSlaveBarrier',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierResult.FromString,
                _registered_method=True)
        self.ViewReplicationProgress = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ViewReplicationProgress',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressResult.FromString,
                _registered_method=True)
        self.ReportLoad = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/ReportLoad',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadResult.FromString,
                _registered_method=True)
        self.FetchRelated = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/FetchRelated',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedResult.FromString,
                _registered_method=True)
        self.GetAllowedBandwidth = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/GetAllowedBandwidth',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthResult.FromString,
                _registered_method=True)
        self.PickSlave = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/PickSlave',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveResult.FromString,
                _registered_method=True)
        self.FetchLoad = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/FetchLoad',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadResult.FromString,
                _registered_method=True)
        self.MetadataMasterBarrier = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/MetadataMasterBarrier',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierResult.FromString,
                _registered_method=True)
        self.RsyncPigeonDedup = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncPigeonDedup',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupResult.FromString,
                _registered_method=True)
        self.RsyncPigeonMetadata = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncPigeonMetadata',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataResult.FromString,
                _registered_method=True)
        self.RsyncSnapTreeDiff = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncSnapTreeDiff',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffResult.FromString,
                _registered_method=True)
        self.RsyncForwardBatchSyncTxOp = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncForwardBatchSyncTxOp',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpResult.FromString,
                _registered_method=True)
        self.RsyncCancelBatchSyncTxOp = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncCancelBatchSyncTxOp',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpResult.FromString,
                _registered_method=True)
        self.RsyncReportBatchProgress = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/RsyncReportBatchProgress',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressResult.FromString,
                _registered_method=True)
        self.PingRemoteCluster = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/PingRemoteCluster',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterResult.FromString,
                _registered_method=True)
        self.EncryptedHandshake = channel.unary_unary(
                '/cohesity.bridge.madrox.stub.RpcService/EncryptedHandshake',
                request_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.EncryptedHandshakeArg.SerializeToString,
                response_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    RPC service used by both the madrox master and slaves.
    """

    def ScheduleReplication(self, request, context):
        """
        The following corresponds to the API exported by Madrox for applications
        layered above it. These RPCs need to be sent to the master directly -
        slaves will not forward these RPCs to the master.

        Schedule a replication of a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleReplicationV2(self, request, context):
        """Schedules a v2 replication where the ancestor view can be provided by the
        application.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelReplication(self, request, context):
        """Cancel a previously scheduled replication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseReplication(self, request, context):
        """Pause a previously scheduled replication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpauseReplication(self, request, context):
        """Unpause a previously paused replication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListReplications(self, request, context):
        """List ongoing replications - either being transmitted or being received.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryReplication(self, request, context):
        """Query information about a given replication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpireReplications(self, request, context):
        """Expire/cancel all replications associated with a given set of application
        views.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartViewReplication(self, request, context):
        """
        The following corresponds to requests sent by the transmitting master
        to the receiving master. The requests may be proxied through a slave
        on the receiving cluster.

        Start the replication of a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteViewReplication(self, request, context):
        """Complete the replication of a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckViewReplication(self, request, context):
        """
        The following corresponds to requests sent by the receiving master
        to the transmitting master. The requests may be proxied through a slave
        on the transmitting cluster.

        Check whether a replication is still in progress.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeViewReplication(self, request, context):
        """
        The following corresponds to requests sent by the transmitting master
        to a slave on the transmitting cluster.

        Start or resume the replication of a view to a remote cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelViewReplication(self, request, context):
        """Cancel the replication of a view to a remote cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseViewReplication(self, request, context):
        """Pause the replication of a view to a remote cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetadataSlaveBarrier(self, request, context):
        """
        The following corresponds to requests sent by the receiving master
        to a slave on the receiving cluster.

        Send the Metadata barrier rpc to slave.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewReplicationProgress(self, request, context):
        """
        The following corresponds to requests sent by a slave to the master on the
        same cluster.

        Progress report on the transmission of a view. Can also indicate that
        the view replication has completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportLoad(self, request, context):
        """Report about the load on the slave.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchRelated(self, request, context):
        """Fetch outstanding uncompleted replications that are related to a given
        replication id - i.e., all these replications are being done from the same
        application view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllowedBandwidth(self, request, context):
        """Requests bandwidth allowed for a replication at the current time.
        Slaves are expected to issue this periodically (e.g., every 10seconds) to
        keep itself updated with the current rate.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PickSlave(self, request, context):
        """
        The following corresponds to requests sent by a slave on the transmitting
        cluster to the master on the receiving cluster. The requests may be
        proxied through a slave on the receiving cluster.

        Pick a suitable slave node for doing some work.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchLoad(self, request, context):
        """Fetch the load information of the various remote slaves.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetadataMasterBarrier(self, request, context):
        """Send the metadata barrier rpc to Rx master.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncPigeonDedup(self, request, context):
        """
        The following corresponds to requests sent by a slave on the transmitting
        cluster to a slave on the receiving cluster.

        Used for transmitting a view using the RsyncPigeonDedup protocol.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncPigeonMetadata(self, request, context):
        """Used to transmit a view metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncSnapTreeDiff(self, request, context):
        """This RPC is used to send a batch of work to sync a directory's child
        entries or a file's data to a Rx slave to sync a view between the
        src_new_view and the dst_new_view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncForwardBatchSyncTxOp(self, request, context):
        """
        The following corresponds to requests sent by a slave on the transmitting
        cluster to a slave on the same cluster.

        This RPC is used by an initiating BatchSyncTxOp to forward the batch
        to a remote Tx slave so as to create a forwarded BatchSyncTxOp.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncCancelBatchSyncTxOp(self, request, context):
        """This RPC is used by an initiating BatchSyncTxOp to inform a forwarded
        BatchSyncTxOp that the work being done should be canceled. Note that
        this may not necessarily mean that the replication has been canceled -
        the initiating BatchSyncTxOp might decide to ask other forwarded ops to
        stop their work if some forwarded op returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RsyncReportBatchProgress(self, request, context):
        """This RPC is used by a forwarded BatchSyncTxOp to report the progress it
        has made so far to the corresponding BatchSyncTxOp that initiated the
        former. The kInvalid error is returned if the correct incarnation of
        receiver no longer exists.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingRemoteCluster(self, request, context):
        """This Rpc pings a remote cluster and sends progress report of active
        replications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptedHandshake(self, request, context):
        """Decrypt the input arg and start replication for the input view with
        decrypted StartViewReplicationArg.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScheduleReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationResult.SerializeToString,
            ),
            'ScheduleReplicationV2': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleReplicationV2,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Arg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Result.SerializeToString,
            ),
            'CancelReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationResult.SerializeToString,
            ),
            'PauseReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationResult.SerializeToString,
            ),
            'UnpauseReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpauseReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationResult.SerializeToString,
            ),
            'ListReplications': grpc.unary_unary_rpc_method_handler(
                    servicer.ListReplications,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsResult.SerializeToString,
            ),
            'QueryReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationResult.SerializeToString,
            ),
            'ExpireReplications': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpireReplications,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsResult.SerializeToString,
            ),
            'StartViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.StartViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.SerializeToString,
            ),
            'CompleteViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationResult.SerializeToString,
            ),
            'CheckViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationResult.SerializeToString,
            ),
            'ResumeViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationResult.SerializeToString,
            ),
            'CancelViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationResult.SerializeToString,
            ),
            'PauseViewReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseViewReplication,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationResult.SerializeToString,
            ),
            'MetadataSlaveBarrier': grpc.unary_unary_rpc_method_handler(
                    servicer.MetadataSlaveBarrier,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierResult.SerializeToString,
            ),
            'ViewReplicationProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewReplicationProgress,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressResult.SerializeToString,
            ),
            'ReportLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportLoad,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadResult.SerializeToString,
            ),
            'FetchRelated': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchRelated,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedResult.SerializeToString,
            ),
            'GetAllowedBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllowedBandwidth,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthResult.SerializeToString,
            ),
            'PickSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.PickSlave,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveResult.SerializeToString,
            ),
            'FetchLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchLoad,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadResult.SerializeToString,
            ),
            'MetadataMasterBarrier': grpc.unary_unary_rpc_method_handler(
                    servicer.MetadataMasterBarrier,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierResult.SerializeToString,
            ),
            'RsyncPigeonDedup': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncPigeonDedup,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupResult.SerializeToString,
            ),
            'RsyncPigeonMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncPigeonMetadata,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataResult.SerializeToString,
            ),
            'RsyncSnapTreeDiff': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncSnapTreeDiff,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffResult.SerializeToString,
            ),
            'RsyncForwardBatchSyncTxOp': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncForwardBatchSyncTxOp,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpResult.SerializeToString,
            ),
            'RsyncCancelBatchSyncTxOp': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncCancelBatchSyncTxOp,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpResult.SerializeToString,
            ),
            'RsyncReportBatchProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.RsyncReportBatchProgress,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressResult.SerializeToString,
            ),
            'PingRemoteCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.PingRemoteCluster,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterResult.SerializeToString,
            ),
            'EncryptedHandshake': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptedHandshake,
                    request_deserializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.EncryptedHandshakeArg.FromString,
                    response_serializer=bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.madrox.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.madrox.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    RPC service used by both the madrox master and slaves.
    """

    @staticmethod
    def ScheduleReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ScheduleReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleReplicationV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ScheduleReplicationV2',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Arg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ScheduleReplicationV2Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/CancelReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/PauseReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnpauseReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/UnpauseReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.UnpauseReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListReplications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ListReplications',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ListReplicationsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/QueryReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.QueryReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExpireReplications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ExpireReplications',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ExpireReplicationsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/StartViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/CompleteViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CompleteViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/CheckViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CheckViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResumeViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ResumeViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ResumeViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/CancelViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.CancelViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseViewReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/PauseViewReplication',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PauseViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MetadataSlaveBarrier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/MetadataSlaveBarrier',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataSlaveBarrierResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewReplicationProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ViewReplicationProgress',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ViewReplicationProgressResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/ReportLoad',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.ReportLoadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchRelated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/FetchRelated',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchRelatedResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllowedBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/GetAllowedBandwidth',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.GetAllowedBandwidthResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PickSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/PickSlave',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PickSlaveResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/FetchLoad',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.FetchLoadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MetadataMasterBarrier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/MetadataMasterBarrier',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.MetadataMasterBarrierResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncPigeonDedup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncPigeonDedup',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonDedupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncPigeonMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncPigeonMetadata',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncPigeonMetadataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncSnapTreeDiff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncSnapTreeDiff',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncSnapTreeDiffResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncForwardBatchSyncTxOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncForwardBatchSyncTxOp',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncForwardBatchSyncTxOpResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncCancelBatchSyncTxOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncCancelBatchSyncTxOp',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncCancelBatchSyncTxOpResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RsyncReportBatchProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/RsyncReportBatchProgress',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.RsyncReportBatchProgressResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PingRemoteCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/PingRemoteCluster',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.PingRemoteClusterResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EncryptedHandshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.madrox.stub.RpcService/EncryptedHandshake',
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.EncryptedHandshakeArg.SerializeToString,
            bridge_dot_madrox_dot_stub_dot_rpc__service__pb2.StartViewReplicationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
