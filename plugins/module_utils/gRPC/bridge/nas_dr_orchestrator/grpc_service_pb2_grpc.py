# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bridge.nas_dr_orchestrator import nas_dr_pb2 as bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bridge/nas_dr_orchestrator/grpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GRpcServiceStub(object):
    """NasDROrchestrator gRPC service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformDROperation = channel.unary_unary(
                '/cohesity.bridge.nas_dr_orchestrator.GRpcService/PerformDROperation',
                request_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationArg.SerializeToString,
                response_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationResult.FromString,
                _registered_method=True)
        self.GetAllowedFailoverOps = channel.unary_unary(
                '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetAllowedFailoverOps',
                request_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsArg.SerializeToString,
                response_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsResult.FromString,
                _registered_method=True)
        self.GetDRStatus = channel.unary_unary(
                '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetDRStatus',
                request_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusArg.SerializeToString,
                response_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusResult.FromString,
                _registered_method=True)
        self.LookupOrUpdateTrackingView = channel.unary_unary(
                '/cohesity.bridge.nas_dr_orchestrator.GRpcService/LookupOrUpdateTrackingView',
                request_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewArg.SerializeToString,
                response_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewResult.FromString,
                _registered_method=True)
        self.GetTrackingViewId = channel.unary_unary(
                '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetTrackingViewId',
                request_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdArg.SerializeToString,
                response_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdResult.FromString,
                _registered_method=True)


class GRpcServiceServicer(object):
    """NasDROrchestrator gRPC service definition.
    """

    def PerformDROperation(self, request, context):
        """Perform a failover operation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllowedFailoverOps(self, request, context):
        """Get allowed failover operations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDRStatus(self, request, context):
        """Get the disaster recovery status for the view. This is used to show useful
        failover information of the view to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupOrUpdateTrackingView(self, request, context):
        """Madrox issues a notification callback to NasDROrchestrator. The callback
        will land on the madrox master node, that node will use this RPC to
        forward the request to NasDROrchestrator master node. This request looks
        up or updates the local view id for the universal view id in
        NasDROrchestrator's in-memory state. Refer bridge/madrox/slave_interface.h
        for details about the callback.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrackingViewId(self, request, context):
        """Get the view id corresponding to the view_uid. This is needed to initiate
        failover on the tracking view when activating a DR plan from kepler.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformDROperation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformDROperation,
                    request_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationArg.FromString,
                    response_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationResult.SerializeToString,
            ),
            'GetAllowedFailoverOps': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllowedFailoverOps,
                    request_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsArg.FromString,
                    response_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsResult.SerializeToString,
            ),
            'GetDRStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDRStatus,
                    request_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusArg.FromString,
                    response_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusResult.SerializeToString,
            ),
            'LookupOrUpdateTrackingView': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupOrUpdateTrackingView,
                    request_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewArg.FromString,
                    response_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewResult.SerializeToString,
            ),
            'GetTrackingViewId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrackingViewId,
                    request_deserializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdArg.FromString,
                    response_serializer=bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.nas_dr_orchestrator.GRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.nas_dr_orchestrator.GRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GRpcService(object):
    """NasDROrchestrator gRPC service definition.
    """

    @staticmethod
    def PerformDROperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.nas_dr_orchestrator.GRpcService/PerformDROperation',
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationArg.SerializeToString,
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.PerformDROperationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllowedFailoverOps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetAllowedFailoverOps',
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsArg.SerializeToString,
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetAllowedFailoverOpsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDRStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetDRStatus',
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusArg.SerializeToString,
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetDRStatusResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupOrUpdateTrackingView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.nas_dr_orchestrator.GRpcService/LookupOrUpdateTrackingView',
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewArg.SerializeToString,
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.LookupOrUpdateTrackingViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrackingViewId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.nas_dr_orchestrator.GRpcService/GetTrackingViewId',
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdArg.SerializeToString,
            bridge_dot_nas__dr__orchestrator_dot_nas__dr__pb2.GetTrackingViewIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
