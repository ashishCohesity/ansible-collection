# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bridge.smb_portal.stub import rpc_service_pb2 as bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bridge/smb_portal/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    RPC service used by the SMB portal.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Forward = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/Forward',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardResult.FromString,
                _registered_method=True)
        self.OplockBreak = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/OplockBreak',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakResult.FromString,
                _registered_method=True)
        self.LeaseBreak = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/LeaseBreak',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakResult.FromString,
                _registered_method=True)
        self.ListSmbSessions = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/ListSmbSessions',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsResult.FromString,
                _registered_method=True)
        self.ListSmbFileOpens = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/ListSmbFileOpens',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensResult.FromString,
                _registered_method=True)
        self.ListSmbTreeConnects = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/ListSmbTreeConnects',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsResult.FromString,
                _registered_method=True)
        self.HasOpenFileHandles = channel.unary_unary(
                '/cohesity.bridge.smb.stub.RpcService/HasOpenFileHandles',
                request_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesArg.SerializeToString,
                response_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    RPC service used by the SMB portal.
    """

    def Forward(self, request, context):
        """Message sent from one SMB portal instance to another to forward a
        SunRPC request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OplockBreak(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaseBreak(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSmbSessions(self, request, context):
        """RPC to list active SMB sessions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSmbFileOpens(self, request, context):
        """RPC to list active SMB file opens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSmbTreeConnects(self, request, context):
        """RPC to list SMB tree conencts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasOpenFileHandles(self, request, context):
        """RPC to check if a directory has open file handles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Forward': grpc.unary_unary_rpc_method_handler(
                    servicer.Forward,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardResult.SerializeToString,
            ),
            'OplockBreak': grpc.unary_unary_rpc_method_handler(
                    servicer.OplockBreak,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakResult.SerializeToString,
            ),
            'LeaseBreak': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaseBreak,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakResult.SerializeToString,
            ),
            'ListSmbSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSmbSessions,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsResult.SerializeToString,
            ),
            'ListSmbFileOpens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSmbFileOpens,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensResult.SerializeToString,
            ),
            'ListSmbTreeConnects': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSmbTreeConnects,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsResult.SerializeToString,
            ),
            'HasOpenFileHandles': grpc.unary_unary_rpc_method_handler(
                    servicer.HasOpenFileHandles,
                    request_deserializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesArg.FromString,
                    response_serializer=bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.smb.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.smb.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    RPC service used by the SMB portal.
    """

    @staticmethod
    def Forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/Forward',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ForwardResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OplockBreak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/OplockBreak',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.OplockBreakResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaseBreak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/LeaseBreak',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.LeaseBreakResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSmbSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/ListSmbSessions',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbSessionsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSmbFileOpens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/ListSmbFileOpens',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListSmbFileOpensResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSmbTreeConnects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/ListSmbTreeConnects',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.ListTreeConnectsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasOpenFileHandles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.smb.stub.RpcService/HasOpenFileHandles',
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesArg.SerializeToString,
            bridge_dot_smb__portal_dot_stub_dot_rpc__service__pb2.HasOpenFileHandlesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
