# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bridge.magneto.base import magneto_actions_pb2 as bridge_dot_magneto_dot_base_dot_magneto__actions__pb2
from bridge.stub import rpc_common_args_pb2 as bridge_dot_stub_dot_rpc__common__args__pb2
from bridge.stub import rpc_service_pb2 as bridge_dot_stub_dot_rpc__service__pb2
from bridge.view_keeper import list_smb_active_opens_pb2 as bridge_dot_view__keeper_dot_list__smb__active__opens__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bridge/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateViewTemplate = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CreateViewTemplate',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateResult.FromString,
                _registered_method=True)
        self.DeleteViewTemplate = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/DeleteViewTemplate',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateResult.FromString,
                _registered_method=True)
        self.ModifyViewTemplate = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ModifyViewTemplate',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateResult.FromString,
                _registered_method=True)
        self.ReadViewTemplate = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ReadViewTemplate',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateResult.FromString,
                _registered_method=True)
        self.FetchAllViewTemplates = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/FetchAllViewTemplates',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateResult.FromString,
                _registered_method=True)
        self.CreateView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CreateView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewResult.FromString,
                _registered_method=True)
        self.DeleteView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/DeleteView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewResult.FromString,
                _registered_method=True)
        self.CloneView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CloneView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneViewResult.FromString,
                _registered_method=True)
        self.ModifyView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ModifyView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewResult.FromString,
                _registered_method=True)
        self.AddPrefix = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/AddPrefix',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.AddPrefixArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AddPrefixResult.FromString,
                _registered_method=True)
        self.DeletePrefix = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/DeletePrefix',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixResult.FromString,
                _registered_method=True)
        self.RenameView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RenameView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RenameViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RenameViewResult.FromString,
                _registered_method=True)
        self.AddViewAlias = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/AddViewAlias',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasResult.FromString,
                _registered_method=True)
        self.ModifyViewAlias = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ModifyViewAlias',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasResult.FromString,
                _registered_method=True)
        self.RemoveViewAlias = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RemoveViewAlias',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasResult.FromString,
                _registered_method=True)
        self.RestoreViewAliases = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RestoreViewAliases',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesResult.FromString,
                _registered_method=True)
        self.SetViewInodeIdFloor = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/SetViewInodeIdFloor',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorResult.FromString,
                _registered_method=True)
        self.FlushMetadataJournal = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/FlushMetadataJournal',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalResult.FromString,
                _registered_method=True)
        self.GetViewIdMapping = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetViewIdMapping',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingResult.FromString,
                _registered_method=True)
        self.GetViewNameMapping = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetViewNameMapping',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingResult.FromString,
                _registered_method=True)
        self.CloneDir = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CloneDir',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneDirArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneDirResult.FromString,
                _registered_method=True)
        self.ExecuteApolloAction = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ExecuteApolloAction',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionResult.FromString,
                _registered_method=True)
        self.ExecuteApolloActionV2 = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ExecuteApolloActionV2',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Arg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Result.FromString,
                _registered_method=True)
        self.QueryApolloAction = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/QueryApolloAction',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionResult.FromString,
                _registered_method=True)
        self.ExecuteMagnetoAction = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ExecuteMagnetoAction',
                request_serializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.SerializeToString,
                response_deserializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.FromString,
                _registered_method=True)
        self.CloneBytes = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CloneBytes',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneBytesArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneBytesResult.FromString,
                _registered_method=True)
        self.ListNfsConnections = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ListNfsConnections',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsResult.FromString,
                _registered_method=True)
        self.NodeConnectionsSummary = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/NodeConnectionsSummary',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryResult.FromString,
                _registered_method=True)
        self.ClusterUsageStats = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ClusterUsageStats',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsResult.FromString,
                _registered_method=True)
        self.SetViewSmbSecurityInfo = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/SetViewSmbSecurityInfo',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoResult.FromString,
                _registered_method=True)
        self.GetViewSmbSecurityInfo = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetViewSmbSecurityInfo',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoResult.FromString,
                _registered_method=True)
        self.ForceClearNLMLocks = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ForceClearNLMLocks',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksResult.FromString,
                _registered_method=True)
        self.ForceCloseSmbOpen = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ForceCloseSmbOpen',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenResult.FromString,
                _registered_method=True)
        self.SearchLdap = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/SearchLdap',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.SearchLdapArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SearchLdapResult.FromString,
                _registered_method=True)
        self.SearchNamesInDomain = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/SearchNamesInDomain',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainResult.FromString,
                _registered_method=True)
        self.GetInodeInfo = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetInodeInfo',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.InodeInfoArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.InodeInfoResult.FromString,
                _registered_method=True)
        self.GetViewUsage = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetViewUsage',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageResult.FromString,
                _registered_method=True)
        self.GetViewUsageDetails = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetViewUsageDetails',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsResult.FromString,
                _registered_method=True)
        self.OverwriteView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/OverwriteView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewResult.FromString,
                _registered_method=True)
        self.ListUserQuota = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ListUserQuota',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaResult.FromString,
                _registered_method=True)
        self.UpdateUserQuota = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UpdateUserQuota',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaResult.FromString,
                _registered_method=True)
        self.GetUserQuotaSummaryForView = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetUserQuotaSummaryForView',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewResult.FromString,
                _registered_method=True)
        self.BackupUserQuotaData = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/BackupUserQuotaData',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataResult.FromString,
                _registered_method=True)
        self.RestoreUserQuotaData = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RestoreUserQuotaData',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataResult.FromString,
                _registered_method=True)
        self.UpdateFileLevelDataLock = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UpdateFileLevelDataLock',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockResult.FromString,
                _registered_method=True)
        self.GetTrustedDomains = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetTrustedDomains',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsResult.FromString,
                _registered_method=True)
        self.GetPrimaryDomain = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetPrimaryDomain',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainResult.FromString,
                _registered_method=True)
        self.GetAdInfoFromSids = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetAdInfoFromSids',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsResult.FromString,
                _registered_method=True)
        self.AuthenticateUser = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/AuthenticateUser',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserResult.FromString,
                _registered_method=True)
        self.GetAdUserGroupSids = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetAdUserGroupSids',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsResult.FromString,
                _registered_method=True)
        self.ValidateLdapProviderConfig = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ValidateLdapProviderConfig',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigResult.FromString,
                _registered_method=True)
        self.CloneToLUN = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CloneToLUN',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNResult.FromString,
                _registered_method=True)
        self.CreateLUN = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CreateLUN',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateLUNArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateLUNResult.FromString,
                _registered_method=True)
        self.GetTargetLUNs = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetTargetLUNs',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsResult.FromString,
                _registered_method=True)
        self.RemoveLUN = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RemoveLUN',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNResult.FromString,
                _registered_method=True)
        self.UpdateLUNSize = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UpdateLUNSize',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeResult.FromString,
                _registered_method=True)
        self.CreateTarget = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CreateTarget',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateTargetArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateTargetResult.FromString,
                _registered_method=True)
        self.DeleteTarget = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/DeleteTarget',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetResult.FromString,
                _registered_method=True)
        self.RefreshTargets = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RefreshTargets',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsResult.FromString,
                _registered_method=True)
        self.GetBridgeCapacity = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetBridgeCapacity',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityResult.FromString,
                _registered_method=True)
        self.ListInfectedFiles = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ListInfectedFiles',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesResult.FromString,
                _registered_method=True)
        self.ModifyInfectedFileState = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ModifyInfectedFileState',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateResult.FromString,
                _registered_method=True)
        self.DeleteInfectedFile = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/DeleteInfectedFile',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileResult.FromString,
                _registered_method=True)
        self.CheckICAPServerConnection = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/CheckICAPServerConnection',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionResult.FromString,
                _registered_method=True)
        self.ListDirQuota = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ListDirQuota',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaResult.FromString,
                _registered_method=True)
        self.UpdateDirQuotaConfig = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UpdateDirQuotaConfig',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigResult.FromString,
                _registered_method=True)
        self.UpdateDirQuota = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UpdateDirQuota',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaResult.FromString,
                _registered_method=True)
        self.BackupDirQuotaData = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/BackupDirQuotaData',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataResult.FromString,
                _registered_method=True)
        self.RestoreDirQuotaData = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RestoreDirQuotaData',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataResult.FromString,
                _registered_method=True)
        self.ClearAccessProviderCache = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ClearAccessProviderCache',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheResult.FromString,
                _registered_method=True)
        self.ValidateKeystoneConfig = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ValidateKeystoneConfig',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigResult.FromString,
                _registered_method=True)
        self.ValidateSwiftConfig = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ValidateSwiftConfig',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigResult.FromString,
                _registered_method=True)
        self.ListSmbActiveOpens = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/ListSmbActiveOpens',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListSmbActiveOpensArg.SerializeToString,
                response_deserializer=bridge_dot_view__keeper_dot_list__smb__active__opens__pb2.ListSmbAllActiveOpensResult.FromString,
                _registered_method=True)
        self.RegisterSwiftService = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/RegisterSwiftService',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceResult.FromString,
                _registered_method=True)
        self.UnregisterSwiftService = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/UnregisterSwiftService',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceResult.FromString,
                _registered_method=True)
        self.MarkSnapTreeAsImmutable = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/MarkSnapTreeAsImmutable',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableResult.FromString,
                _registered_method=True)
        self.MarkSnapTreeAsMutable = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/MarkSnapTreeAsMutable',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableResult.FromString,
                _registered_method=True)
        self.FetchSessionStateForEntityAccess = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/FetchSessionStateForEntityAccess',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessResult.FromString,
                _registered_method=True)
        self.LookupSids = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/LookupSids',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.LookupSidsArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.LookupSidsResult.FromString,
                _registered_method=True)
        self.TriggerManualTrustDiscovery = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/TriggerManualTrustDiscovery',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryResult.FromString,
                _registered_method=True)
        self.IsManualTrustDiscoveryRunnning = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/IsManualTrustDiscoveryRunnning',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningResult.FromString,
                _registered_method=True)
        self.GetAdDomainControllerStatus = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetAdDomainControllerStatus',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusResult.FromString,
                _registered_method=True)
        self.GetDomainControllers = channel.unary_unary(
                '/cohesity.bridge.stub.RpcService/GetDomainControllers',
                request_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """----------------------------------------------------------------------------

    """

    def CreateViewTemplate(self, request, context):
        """Creates a view template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteViewTemplate(self, request, context):
        """Deletes a view template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyViewTemplate(self, request, context):
        """Modifies a view template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadViewTemplate(self, request, context):
        """Reads a view template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAllViewTemplates(self, request, context):
        """Fetches all the view templates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPrefix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePrefix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddViewAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyViewAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveViewAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreViewAliases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetViewInodeIdFloor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushMetadataJournal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViewIdMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViewNameMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteApolloAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteApolloActionV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryApolloAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteMagnetoAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneBytes(self, request, context):
        """RPC to clone a byte range from 1 file to another.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNfsConnections(self, request, context):
        """RPC to get the list of NFS connections from each node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeConnectionsSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClusterUsageStats(self, request, context):
        """RPC to get ClusterUsageStats from disks of peer nodes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetViewSmbSecurityInfo(self, request, context):
        """RPC to apply SMB permissions to root inode of a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViewSmbSecurityInfo(self, request, context):
        """RPC to read SMB permissions from root inode of a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceClearNLMLocks(self, request, context):
        """RPC to force clear NLM Locks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceCloseSmbOpen(self, request, context):
        """RPC to force close active SMB opens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchLdap(self, request, context):
        """RPC to perform an generic LDAP search in the given Active Directory
        domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchNamesInDomain(self, request, context):
        """RPC to perform an LDAP search of users or groups in the
        given Active Directory domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInodeInfo(self, request, context):
        """RPC to get inode info for a particular path. Used for debugging - e.g.
        finding blob_id, eh_ etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViewUsage(self, request, context):
        """RPC to get view usage for a particular view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViewUsageDetails(self, request, context):
        """RPC to get view usage details for a particular view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OverwriteView(self, request, context):
        """RPC to overwrite a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUserQuota(self, request, context):
        """RPC to list the quota policy (and optionally usage) for all the users in
        a given view. Can be used to query the policy and usage information of
        a particular user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserQuota(self, request, context):
        """RPC to update the user_quota_policy override of a specific user in a
        view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserQuotaSummaryForView(self, request, context):
        """RPC to get the user quota summary for a specific view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackupUserQuotaData(self, request, context):
        """RPC to backup all the user quota settings and store them in the view.
        The server will read the current user quota settings and persist them
        in a dedicated directory in cohesity_internal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreUserQuotaData(self, request, context):
        """RPC to read the user quota settings backup (generated by above rpc) and
        apply the settings in input view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFileLevelDataLock(self, request, context):
        """RPC to update the file level data lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrustedDomains(self, request, context):
        """RPC to get the list of trusted domains.  Can give only those domains
        that can be used for authentication or the complete list, depending
        on setting of a flag in the args.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimaryDomain(self, request, context):
        """RPC to get the primary domain corresponding to the input domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAdInfoFromSids(self, request, context):
        """RPC to get info about AD users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateUser(self, request, context):
        """RPC to authenticate AD/LDAP users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAdUserGroupSids(self, request, context):
        """RPC to return group SIDs of an AD user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateLdapProviderConfig(self, request, context):
        """RPC to validate LDAP config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneToLUN(self, request, context):
        """RPC to clone an existing file as a new LUN in iscsi.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLUN(self, request, context):
        """RPC to create a LUN in iscsi.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTargetLUNs(self, request, context):
        """RPC to list all then LUNs of a target in iscsi.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveLUN(self, request, context):
        """RPC to remove a LUN in iscsi.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLUNSize(self, request, context):
        """RPC to update a LUN in iscsi.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTarget(self, request, context):
        """Create an iSCSI enabled target.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTarget(self, request, context):
        """Delete an iSCSI target.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshTargets(self, request, context):
        """Refresh the list of iSCSI targets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBridgeCapacity(self, request, context):
        """RPC to get node capacity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInfectedFiles(self, request, context):
        """RPC to get the list of virus infected files.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyInfectedFileState(self, request, context):
        """RPC to modify the remediation state of the infected file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteInfectedFile(self, request, context):
        """RPC to delete the an infected file which is in quarantined state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckICAPServerConnection(self, request, context):
        """RPC to check the connectivity of the icap server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDirQuota(self, request, context):
        """RPC to get directory quota information for a view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDirQuotaConfig(self, request, context):
        """RPC to update the directory quota configuration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDirQuota(self, request, context):
        """RPC to update directory quota policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackupDirQuotaData(self, request, context):
        """RPC to backup all the directory quota settings and store them in the view.
        The server will read the current directory quota settings and persist them
        in a dedicated directory in cohesity_internal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreDirQuotaData(self, request, context):
        """RPC to read the directory quota settings backup (generated by above rpc)
        and apply the settings in input view.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearAccessProviderCache(self, request, context):
        """RPC to clear AD and LDAP provider caches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateKeystoneConfig(self, request, context):
        """RPC to validate a Keystone config and store it into cluster config if it
        is a valid config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateSwiftConfig(self, request, context):
        """RPC to validate a Swift config and store it into cluster config if it is a
        valid config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSmbActiveOpens(self, request, context):
        """RPC to get smb open info from smb_file_keeper.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSwiftService(self, request, context):
        """RPC to register Swift service by tenant in the Openstack system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterSwiftService(self, request, context):
        """RPC to unregister Swift service by tenant in the Openstack system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkSnapTreeAsImmutable(self, request, context):
        """RPC to mark a snap tree as immutable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkSnapTreeAsMutable(self, request, context):
        """RPC to mark a snap tree as mutable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchSessionStateForEntityAccess(self, request, context):
        """RPC to fetch smb session state given domain name and username under that
        domain. This requires the result to include partial fields in session
        state like tokens, uid/gid mapped to NFS and secondary gid mapped to NFS.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupSids(self, request, context):
        """RPC to fetch the human readable user name with associated domain it
        belongs to given list of sids.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerManualTrustDiscovery(self, request, context):
        """RPC to Trigger a manual trusted domain discovery of
        a specified primary domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsManualTrustDiscoveryRunnning(self, request, context):
        """RPC to check if the discovery initiated by TriggerManualTrustDiscovery()
        is still running.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAdDomainControllerStatus(self, request, context):
        """RPC to get domain controller status for a specific domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDomainControllers(self, request, context):
        """RPC to get domain controller list for a specific domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateViewTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateViewTemplate,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateResult.SerializeToString,
            ),
            'DeleteViewTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteViewTemplate,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateResult.SerializeToString,
            ),
            'ModifyViewTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyViewTemplate,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateResult.SerializeToString,
            ),
            'ReadViewTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadViewTemplate,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateResult.SerializeToString,
            ),
            'FetchAllViewTemplates': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAllViewTemplates,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateResult.SerializeToString,
            ),
            'CreateView': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateViewResult.SerializeToString,
            ),
            'DeleteView': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteViewResult.SerializeToString,
            ),
            'CloneView': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneViewResult.SerializeToString,
            ),
            'ModifyView': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewResult.SerializeToString,
            ),
            'AddPrefix': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPrefix,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AddPrefixArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.AddPrefixResult.SerializeToString,
            ),
            'DeletePrefix': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePrefix,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixResult.SerializeToString,
            ),
            'RenameView': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RenameViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RenameViewResult.SerializeToString,
            ),
            'AddViewAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.AddViewAlias,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasResult.SerializeToString,
            ),
            'ModifyViewAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyViewAlias,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasResult.SerializeToString,
            ),
            'RemoveViewAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveViewAlias,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasResult.SerializeToString,
            ),
            'RestoreViewAliases': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreViewAliases,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesResult.SerializeToString,
            ),
            'SetViewInodeIdFloor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetViewInodeIdFloor,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorResult.SerializeToString,
            ),
            'FlushMetadataJournal': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushMetadataJournal,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalResult.SerializeToString,
            ),
            'GetViewIdMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetViewIdMapping,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingResult.SerializeToString,
            ),
            'GetViewNameMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetViewNameMapping,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingResult.SerializeToString,
            ),
            'CloneDir': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneDir,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneDirArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneDirResult.SerializeToString,
            ),
            'ExecuteApolloAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteApolloAction,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionResult.SerializeToString,
            ),
            'ExecuteApolloActionV2': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteApolloActionV2,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Arg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Result.SerializeToString,
            ),
            'QueryApolloAction': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryApolloAction,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionResult.SerializeToString,
            ),
            'ExecuteMagnetoAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteMagnetoAction,
                    request_deserializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.FromString,
                    response_serializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.SerializeToString,
            ),
            'CloneBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneBytes,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneBytesArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneBytesResult.SerializeToString,
            ),
            'ListNfsConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNfsConnections,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsResult.SerializeToString,
            ),
            'NodeConnectionsSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeConnectionsSummary,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryResult.SerializeToString,
            ),
            'ClusterUsageStats': grpc.unary_unary_rpc_method_handler(
                    servicer.ClusterUsageStats,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsResult.SerializeToString,
            ),
            'SetViewSmbSecurityInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetViewSmbSecurityInfo,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoResult.SerializeToString,
            ),
            'GetViewSmbSecurityInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetViewSmbSecurityInfo,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoResult.SerializeToString,
            ),
            'ForceClearNLMLocks': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceClearNLMLocks,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksResult.SerializeToString,
            ),
            'ForceCloseSmbOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceCloseSmbOpen,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenResult.SerializeToString,
            ),
            'SearchLdap': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchLdap,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SearchLdapArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.SearchLdapResult.SerializeToString,
            ),
            'SearchNamesInDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchNamesInDomain,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainResult.SerializeToString,
            ),
            'GetInodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInodeInfo,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.InodeInfoArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.InodeInfoResult.SerializeToString,
            ),
            'GetViewUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetViewUsage,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageResult.SerializeToString,
            ),
            'GetViewUsageDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetViewUsageDetails,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsResult.SerializeToString,
            ),
            'OverwriteView': grpc.unary_unary_rpc_method_handler(
                    servicer.OverwriteView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewResult.SerializeToString,
            ),
            'ListUserQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUserQuota,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaResult.SerializeToString,
            ),
            'UpdateUserQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserQuota,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaResult.SerializeToString,
            ),
            'GetUserQuotaSummaryForView': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserQuotaSummaryForView,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewResult.SerializeToString,
            ),
            'BackupUserQuotaData': grpc.unary_unary_rpc_method_handler(
                    servicer.BackupUserQuotaData,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataResult.SerializeToString,
            ),
            'RestoreUserQuotaData': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreUserQuotaData,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataResult.SerializeToString,
            ),
            'UpdateFileLevelDataLock': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFileLevelDataLock,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockResult.SerializeToString,
            ),
            'GetTrustedDomains': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrustedDomains,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsResult.SerializeToString,
            ),
            'GetPrimaryDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimaryDomain,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainResult.SerializeToString,
            ),
            'GetAdInfoFromSids': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAdInfoFromSids,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsResult.SerializeToString,
            ),
            'AuthenticateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUser,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserResult.SerializeToString,
            ),
            'GetAdUserGroupSids': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAdUserGroupSids,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsResult.SerializeToString,
            ),
            'ValidateLdapProviderConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateLdapProviderConfig,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigResult.SerializeToString,
            ),
            'CloneToLUN': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneToLUN,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNResult.SerializeToString,
            ),
            'CreateLUN': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLUN,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateLUNArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateLUNResult.SerializeToString,
            ),
            'GetTargetLUNs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTargetLUNs,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsResult.SerializeToString,
            ),
            'RemoveLUN': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveLUN,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNResult.SerializeToString,
            ),
            'UpdateLUNSize': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLUNSize,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeResult.SerializeToString,
            ),
            'CreateTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTarget,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CreateTargetArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CreateTargetResult.SerializeToString,
            ),
            'DeleteTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTarget,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetResult.SerializeToString,
            ),
            'RefreshTargets': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshTargets,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsResult.SerializeToString,
            ),
            'GetBridgeCapacity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBridgeCapacity,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityResult.SerializeToString,
            ),
            'ListInfectedFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInfectedFiles,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesResult.SerializeToString,
            ),
            'ModifyInfectedFileState': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyInfectedFileState,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateResult.SerializeToString,
            ),
            'DeleteInfectedFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteInfectedFile,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileResult.SerializeToString,
            ),
            'CheckICAPServerConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckICAPServerConnection,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionResult.SerializeToString,
            ),
            'ListDirQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDirQuota,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaResult.SerializeToString,
            ),
            'UpdateDirQuotaConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDirQuotaConfig,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigResult.SerializeToString,
            ),
            'UpdateDirQuota': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDirQuota,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaResult.SerializeToString,
            ),
            'BackupDirQuotaData': grpc.unary_unary_rpc_method_handler(
                    servicer.BackupDirQuotaData,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataResult.SerializeToString,
            ),
            'RestoreDirQuotaData': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreDirQuotaData,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataResult.SerializeToString,
            ),
            'ClearAccessProviderCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearAccessProviderCache,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheResult.SerializeToString,
            ),
            'ValidateKeystoneConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateKeystoneConfig,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigResult.SerializeToString,
            ),
            'ValidateSwiftConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateSwiftConfig,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigResult.SerializeToString,
            ),
            'ListSmbActiveOpens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSmbActiveOpens,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.ListSmbActiveOpensArg.FromString,
                    response_serializer=bridge_dot_view__keeper_dot_list__smb__active__opens__pb2.ListSmbAllActiveOpensResult.SerializeToString,
            ),
            'RegisterSwiftService': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSwiftService,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceResult.SerializeToString,
            ),
            'UnregisterSwiftService': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterSwiftService,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceResult.SerializeToString,
            ),
            'MarkSnapTreeAsImmutable': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkSnapTreeAsImmutable,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableResult.SerializeToString,
            ),
            'MarkSnapTreeAsMutable': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkSnapTreeAsMutable,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableResult.SerializeToString,
            ),
            'FetchSessionStateForEntityAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSessionStateForEntityAccess,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessResult.SerializeToString,
            ),
            'LookupSids': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupSids,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.LookupSidsArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.LookupSidsResult.SerializeToString,
            ),
            'TriggerManualTrustDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerManualTrustDiscovery,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryResult.SerializeToString,
            ),
            'IsManualTrustDiscoveryRunnning': grpc.unary_unary_rpc_method_handler(
                    servicer.IsManualTrustDiscoveryRunnning,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningResult.SerializeToString,
            ),
            'GetAdDomainControllerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAdDomainControllerStatus,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusResult.SerializeToString,
            ),
            'GetDomainControllers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDomainControllers,
                    request_deserializer=bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def CreateViewTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CreateViewTemplate',
            bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CreateViewTemplateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteViewTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/DeleteViewTemplate',
            bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DeleteViewTemplateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyViewTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ModifyViewTemplate',
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewTemplateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadViewTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ReadViewTemplate',
            bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ReadViewTemplateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchAllViewTemplates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/FetchAllViewTemplates',
            bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.FetchAllViewTemplateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CreateView',
            bridge_dot_stub_dot_rpc__service__pb2.CreateViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CreateViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/DeleteView',
            bridge_dot_stub_dot_rpc__service__pb2.DeleteViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DeleteViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CloneView',
            bridge_dot_stub_dot_rpc__service__pb2.CloneViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CloneViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ModifyView',
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddPrefix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/AddPrefix',
            bridge_dot_stub_dot_rpc__service__pb2.AddPrefixArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.AddPrefixResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePrefix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/DeletePrefix',
            bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DeletePrefixResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RenameView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RenameView',
            bridge_dot_stub_dot_rpc__service__pb2.RenameViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RenameViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddViewAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/AddViewAlias',
            bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.AddViewAliasResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyViewAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ModifyViewAlias',
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ModifyViewAliasResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveViewAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RemoveViewAlias',
            bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RemoveViewAliasResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestoreViewAliases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RestoreViewAliases',
            bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RestoreViewAliasesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetViewInodeIdFloor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/SetViewInodeIdFloor',
            bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.SetViewInodeIdFloorResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushMetadataJournal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/FlushMetadataJournal',
            bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.FlushMetadataJournalResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetViewIdMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetViewIdMapping',
            bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetViewIdMappingResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetViewNameMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetViewNameMapping',
            bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetViewNameMappingResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CloneDir',
            bridge_dot_stub_dot_rpc__service__pb2.CloneDirArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CloneDirResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteApolloAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ExecuteApolloAction',
            bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteApolloActionV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ExecuteApolloActionV2',
            bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Arg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ExecuteApolloActionV2Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryApolloAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/QueryApolloAction',
            bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.QueryApolloActionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteMagnetoAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ExecuteMagnetoAction',
            bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.SerializeToString,
            bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CloneBytes',
            bridge_dot_stub_dot_rpc__service__pb2.CloneBytesArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CloneBytesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNfsConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ListNfsConnections',
            bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ListNfsConnectionsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NodeConnectionsSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/NodeConnectionsSummary',
            bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.NodeConnectionsSummaryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClusterUsageStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ClusterUsageStats',
            bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ClusterUsageStatsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetViewSmbSecurityInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/SetViewSmbSecurityInfo',
            bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.SetViewSmbSecurityInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetViewSmbSecurityInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetViewSmbSecurityInfo',
            bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetViewSmbSecurityInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForceClearNLMLocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ForceClearNLMLocks',
            bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ForceClearNLMLocksResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForceCloseSmbOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ForceCloseSmbOpen',
            bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ForceCloseSmbOpenResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchLdap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/SearchLdap',
            bridge_dot_stub_dot_rpc__service__pb2.SearchLdapArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.SearchLdapResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchNamesInDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/SearchNamesInDomain',
            bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.SearchNamesInDomainResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetInodeInfo',
            bridge_dot_stub_dot_rpc__service__pb2.InodeInfoArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.InodeInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetViewUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetViewUsage',
            bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetViewUsageDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetViewUsageDetails',
            bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetViewUsageDetailsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OverwriteView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/OverwriteView',
            bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.OverwriteViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUserQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ListUserQuota',
            bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ListUserQuotaResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UpdateUserQuota',
            bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.UpdateUserQuotaResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserQuotaSummaryForView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetUserQuotaSummaryForView',
            bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetUserQuotaSummaryForViewResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BackupUserQuotaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/BackupUserQuotaData',
            bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.BackupUserQuotaDataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestoreUserQuotaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RestoreUserQuotaData',
            bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RestoreUserQuotaDataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFileLevelDataLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UpdateFileLevelDataLock',
            bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.UpdateFileLevelDataLockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrustedDomains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetTrustedDomains',
            bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetTrustedDomainsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrimaryDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetPrimaryDomain',
            bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetPrimaryDomainResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAdInfoFromSids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetAdInfoFromSids',
            bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetAdInfoFromSidsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthenticateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/AuthenticateUser',
            bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.AuthenticateUserResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAdUserGroupSids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetAdUserGroupSids',
            bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetAdUserGroupSidsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateLdapProviderConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ValidateLdapProviderConfig',
            bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ValidateLdapProviderConfigResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneToLUN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CloneToLUN',
            bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CloneToLUNResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLUN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CreateLUN',
            bridge_dot_stub_dot_rpc__service__pb2.CreateLUNArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CreateLUNResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTargetLUNs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetTargetLUNs',
            bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetTargetLUNsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveLUN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RemoveLUN',
            bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RemoveLUNResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLUNSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UpdateLUNSize',
            bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.UpdateLUNSizeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CreateTarget',
            bridge_dot_stub_dot_rpc__service__pb2.CreateTargetArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CreateTargetResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/DeleteTarget',
            bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DeleteTargetResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshTargets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RefreshTargets',
            bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RefreshTargetsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBridgeCapacity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetBridgeCapacity',
            bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetBridgeCapacityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListInfectedFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ListInfectedFiles',
            bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ListInfectedFilesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyInfectedFileState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ModifyInfectedFileState',
            bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ModifyInfectedFileStateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteInfectedFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/DeleteInfectedFile',
            bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DeleteInfectedFileResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckICAPServerConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/CheckICAPServerConnection',
            bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.CheckICAPServerConnectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDirQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ListDirQuota',
            bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ListDirQuotaResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDirQuotaConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UpdateDirQuotaConfig',
            bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.DirQuotaConfigResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDirQuota(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UpdateDirQuota',
            bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.UpdateDirQuotaResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BackupDirQuotaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/BackupDirQuotaData',
            bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.BackupDirQuotaDataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestoreDirQuotaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RestoreDirQuotaData',
            bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RestoreDirQuotaDataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearAccessProviderCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ClearAccessProviderCache',
            bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ClearAccessProviderCacheResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateKeystoneConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ValidateKeystoneConfig',
            bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ValidateKeystoneConfigResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateSwiftConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ValidateSwiftConfig',
            bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.ValidateSwiftConfigResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSmbActiveOpens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/ListSmbActiveOpens',
            bridge_dot_stub_dot_rpc__service__pb2.ListSmbActiveOpensArg.SerializeToString,
            bridge_dot_view__keeper_dot_list__smb__active__opens__pb2.ListSmbAllActiveOpensResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterSwiftService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/RegisterSwiftService',
            bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.RegisterSwiftServiceResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterSwiftService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/UnregisterSwiftService',
            bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.UnregisterSwiftServiceResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkSnapTreeAsImmutable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/MarkSnapTreeAsImmutable',
            bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsImmutableResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkSnapTreeAsMutable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/MarkSnapTreeAsMutable',
            bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.MarkSnapTreeAsMutableResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchSessionStateForEntityAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/FetchSessionStateForEntityAccess',
            bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.FetchSessionStateForEntityAccessResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupSids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/LookupSids',
            bridge_dot_stub_dot_rpc__service__pb2.LookupSidsArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.LookupSidsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerManualTrustDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/TriggerManualTrustDiscovery',
            bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.TriggerManualTrustDiscoveryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsManualTrustDiscoveryRunnning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/IsManualTrustDiscoveryRunnning',
            bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.IsManualTrustDiscoveryRunnningResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAdDomainControllerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetAdDomainControllerStatus',
            bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetAdDomainControllerStatusResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDomainControllers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.RpcService/GetDomainControllers',
            bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersArg.SerializeToString,
            bridge_dot_stub_dot_rpc__service__pb2.GetDomainControllersResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BridgeProxyRpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteMagnetoAction = channel.unary_unary(
                '/cohesity.bridge.stub.BridgeProxyRpcService/ExecuteMagnetoAction',
                request_serializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.SerializeToString,
                response_deserializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.FromString,
                _registered_method=True)
        self.ActionUpdate = channel.unary_unary(
                '/cohesity.bridge.stub.BridgeProxyRpcService/ActionUpdate',
                request_serializer=bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateArg.SerializeToString,
                response_deserializer=bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateResult.FromString,
                _registered_method=True)


class BridgeProxyRpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def ExecuteMagnetoAction(self, request, context):
        """Currently bridge_proxy only supports few of magneto action executors. So
        it is it exports only this service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionUpdate(self, request, context):
        """RPC called by the storage Proxy module to update the bridge proxy about an
        action that it previously issued to the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BridgeProxyRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteMagnetoAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteMagnetoAction,
                    request_deserializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.FromString,
                    response_serializer=bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.SerializeToString,
            ),
            'ActionUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ActionUpdate,
                    request_deserializer=bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateArg.FromString,
                    response_serializer=bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.bridge.stub.BridgeProxyRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.bridge.stub.BridgeProxyRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BridgeProxyRpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def ExecuteMagnetoAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.BridgeProxyRpcService/ExecuteMagnetoAction',
            bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionArg.SerializeToString,
            bridge_dot_magneto_dot_base_dot_magneto__actions__pb2.ExecuteActionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActionUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.bridge.stub.BridgeProxyRpcService/ActionUpdate',
            bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateArg.SerializeToString,
            bridge_dot_stub_dot_rpc__common__args__pb2.BridgeActionUpdateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
