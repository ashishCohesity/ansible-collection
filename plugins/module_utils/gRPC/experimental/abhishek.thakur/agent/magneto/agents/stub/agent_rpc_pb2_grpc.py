# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from magneto.agents.stub import agent_base_pb2 as magneto_dot_agents_dot_stub_dot_agent__base__pb2
from magneto.agents.stub import agent_param_pb2 as magneto_dot_agents_dot_stub_dot_agent__param__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in experimental/abhishek.thakur/agent/magneto/agents/stub/agent_rpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AgentRpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/cohesity.magneto.agents.stub.AgentRpcService/RegisterAgent',
                request_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentResult.FromString,
                _registered_method=True)
        self.UnregisterAgent = channel.unary_unary(
                '/cohesity.magneto.agents.stub.AgentRpcService/UnregisterAgent',
                request_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.UnregisterAgentArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_agent__base__pb2.Result.FromString,
                _registered_method=True)
        self.GetAgentInfo = channel.unary_unary(
                '/cohesity.magneto.agents.stub.AgentRpcService/GetAgentInfo',
                request_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoResult.FromString,
                _registered_method=True)
        self.FetchVolumeInfo = channel.unary_unary(
                '/cohesity.magneto.agents.stub.AgentRpcService/FetchVolumeInfo',
                request_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoResult.FromString,
                _registered_method=True)
        self.GetHostInfo = channel.unary_unary(
                '/cohesity.magneto.agents.stub.AgentRpcService/GetHostInfo',
                request_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoResult.FromString,
                _registered_method=True)


class AgentRpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def RegisterAgent(self, request, context):
        """Requests the agent to register with the cluster. If this is successful,
        calls are accepted only from this cluster and all others are rejected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterAgent(self, request, context):
        """Unregisters the agent with the cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentInfo(self, request, context):
        """Get information regarding the running agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchVolumeInfo(self, request, context):
        """Fetch information regarding volumes on the system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHostInfo(self, request, context):
        """Fetch information regarding the host system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentResult.SerializeToString,
            ),
            'UnregisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterAgent,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.UnregisterAgentArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_agent__base__pb2.Result.SerializeToString,
            ),
            'GetAgentInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentInfo,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoResult.SerializeToString,
            ),
            'FetchVolumeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchVolumeInfo,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoResult.SerializeToString,
            ),
            'GetHostInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHostInfo,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.magneto.agents.stub.AgentRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.magneto.agents.stub.AgentRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentRpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.AgentRpcService/RegisterAgent',
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.RegisterAgentResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.AgentRpcService/UnregisterAgent',
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.UnregisterAgentArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_agent__base__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.AgentRpcService/GetAgentInfo',
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetAgentInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchVolumeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.AgentRpcService/FetchVolumeInfo',
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.FetchVolumeInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHostInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.AgentRpcService/GetHostInfo',
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_agent__param__pb2.GetHostInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
