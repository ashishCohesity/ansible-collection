# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from gaia.emblem.api import api_pb2 as gaia_dot_emblem_dot_api_dot_api__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gaia/emblem/api/grpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GrpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/CreateCollection',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionResult.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/DeleteCollection',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionResult.FromString,
                _registered_method=True)
        self.StartDocumentUpload = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/StartDocumentUpload',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadResult.FromString,
                _registered_method=True)
        self.UploadDocumentParts = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/UploadDocumentParts',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsResult.FromString,
                _registered_method=True)
        self.CreateEmbeddings = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/CreateEmbeddings',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsResult.FromString,
                _registered_method=True)
        self.GetSimilarDocumentParts = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/GetSimilarDocumentParts',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsResult.FromString,
                _registered_method=True)
        self.ConvertDocuments = channel.unary_unary(
                '/cohesity.gaia.emblem.api.GrpcService/ConvertDocuments',
                request_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsArg.SerializeToString,
                response_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsResult.FromString,
                _registered_method=True)


class GrpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCollection(self, request, context):
        """Creates a collection in the vector database to store document embeddings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Deletes the collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDocumentUpload(self, request, context):
        """Start large document upload to create embeddings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadDocumentParts(self, request, context):
        """Upload large document part to create embeddings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEmbeddings(self, request, context):
        """Create embeddings of the user supplied document.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimilarDocumentParts(self, request, context):
        """Returns the list of documents parts that matches with user query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertDocuments(self, request, context):
        """Convert the supplied documents into their plain text format.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionResult.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionResult.SerializeToString,
            ),
            'StartDocumentUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDocumentUpload,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadResult.SerializeToString,
            ),
            'UploadDocumentParts': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadDocumentParts,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsResult.SerializeToString,
            ),
            'CreateEmbeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmbeddings,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsResult.SerializeToString,
            ),
            'GetSimilarDocumentParts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarDocumentParts,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsResult.SerializeToString,
            ),
            'ConvertDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertDocuments,
                    request_deserializer=gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsArg.FromString,
                    response_serializer=gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.gaia.emblem.api.GrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.gaia.emblem.api.GrpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GrpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/CreateCollection',
            gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.CreateCollectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/DeleteCollection',
            gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.DeleteCollectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartDocumentUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/StartDocumentUpload',
            gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.StartDocumentUploadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadDocumentParts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/UploadDocumentParts',
            gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.UploadDocumentPartsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateEmbeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/CreateEmbeddings',
            gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.CreateEmbeddingsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimilarDocumentParts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/GetSimilarDocumentParts',
            gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.GetSimilarDocumentPartsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConvertDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gaia.emblem.api.GrpcService/ConvertDocuments',
            gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsArg.SerializeToString,
            gaia_dot_emblem_dot_api_dot_api__pb2.ConvertDocumentsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
