# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from gandalf.server.stub import gandalf_pb2 as gandalf_dot_server_dot_stub_dot_gandalf__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gandalf/server/stub/gandalf_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """Service declarations 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMaster = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/GetMaster',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterResult.FromString,
                _registered_method=True)
        self.ReserveSessionId = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/ReserveSessionId',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdResult.FromString,
                _registered_method=True)
        self.EstablishSession = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/EstablishSession',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionResult.FromString,
                _registered_method=True)
        self.FindHealthySessions = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/FindHealthySessions',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsResult.FromString,
                _registered_method=True)
        self.CloseSession = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/CloseSession',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionResult.FromString,
                _registered_method=True)
        self.KeepAlive = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/KeepAlive',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveResult.FromString,
                _registered_method=True)
        self.RegisterSession = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/RegisterSession',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionResult.FromString,
                _registered_method=True)
        self.UpdateKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/UpdateKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyResult.FromString,
                _registered_method=True)
        self.LookupKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/LookupKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyResult.FromString,
                _registered_method=True)
        self.DeleteKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/DeleteKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyResult.FromString,
                _registered_method=True)
        self.WatchKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/WatchKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyResult.FromString,
                _registered_method=True)
        self.CancelWatchKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/CancelWatchKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyResult.FromString,
                _registered_method=True)
        self.AcquireLock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/AcquireLock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockResult.FromString,
                _registered_method=True)
        self.ReleaseLock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/ReleaseLock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockResult.FromString,
                _registered_method=True)
        self.FetchLockHolders = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/FetchLockHolders',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersResult.FromString,
                _registered_method=True)
        self.WatchLock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/WatchLock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockResult.FromString,
                _registered_method=True)
        self.CancelWatchLock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/CancelWatchLock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockResult.FromString,
                _registered_method=True)
        self.AtomicIncrement = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/AtomicIncrement',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementResult.FromString,
                _registered_method=True)
        self.TransformKey = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/TransformKey',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyResult.FromString,
                _registered_method=True)
        self.RegisterLiveness = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/RegisterLiveness',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessResult.FromString,
                _registered_method=True)
        self.WatchLiveness = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/WatchLiveness',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessResult.FromString,
                _registered_method=True)
        self.CancelWatchLiveness = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/CancelWatchLiveness',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessResult.FromString,
                _registered_method=True)
        self.FetchLive = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/FetchLive',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveResult.FromString,
                _registered_method=True)
        self.LookupConstituentHealth = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/LookupConstituentHealth',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthResult.FromString,
                _registered_method=True)
        self.LookupConstituentStats = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/LookupConstituentStats',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsResult.FromString,
                _registered_method=True)
        self.RecordOpClock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/RecordOpClock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockResult.FromString,
                _registered_method=True)
        self.RemoveOpClock = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/RemoveOpClock',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockResult.FromString,
                _registered_method=True)
        self.FetchOpClocks = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/FetchOpClocks',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksResult.FromString,
                _registered_method=True)
        self.FetchCachedOpClocks = channel.unary_unary(
                '/cohesity.gandalf.server.stub.RpcService/FetchCachedOpClocks',
                request_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksArg.SerializeToString,
                response_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """Service declarations 

    """

    def GetMaster(self, request, context):
        """Session API 

        Clients use this call to get information about the Gandalf master.
        A server serving this request replies with the current master information.
        This is the only RPC that the client can send to any Gandalf server, and
        expect a successful response. For all other RPCs, a server which is not
        master will return an error code of kNotMaster, and hence all other calls
        should only be sent to master, whose discovery is done through this call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveSessionId(self, request, context):
        """Reserve a session id with master. This session id will then be used while
        establishing session with master. This is done to avoid bloating master
        with session records incase of establish session error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstablishSession(self, request, context):
        """Establish a session with the master. A new session can be established or
        a session from an older master can be failed over to the new master.
        A session_id is obtained after establishing a session successfully. The
        server will fail client requests without a valid session_id. The
        session_id will remain the same after a successful session failover.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindHealthySessions(self, request, context):
        """Client uses this call to find the list of healthy sessions from the
        given list of sessions. If none of them are healthy reurns an empty list.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Tell the server to end the session, and hence release any locks associated
        with this session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KeepAlive(self, request, context):
        """Session provides an implicit lease on all the locks held by the client.
        Clients need to periodically send a KeepAlive message to let the server
        know that it is alive. If server does not receive a KeepAlive for a
        specified amount of time, it assumes that client has died and expires the
        session. On session expiry, all state including watches and locks held by
        the client is released at the server. The KeepAlive response is also used
        by the server to piggyback and send notifications to client corresponding
        to the watches registered by the client.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSession(self, request, context):
        """Used by gandalf clients to register their session with the local gandalf
        server running on the same node. When the process is externally killed,
        the killing agent (usually nexus) will request the local gandalf server
        to drop the session that was previously registered by the killed process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKey(self, request, context):
        """Key API 

        Update a key. The value of the key will be passed as payload.
        If successful, this operation updates the version of the key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupKey(self, request, context):
        """Lookup a key. The value of the key will be returned as payload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKey(self, request, context):
        """Delete a Key.
        If successful, this operation updates the version of the key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchKey(self, request, context):
        """Put a watch on changes to a key. Watch is tied to the session id.
        Return the current data and version, if the provided version is less than
        the one at server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelWatchKey(self, request, context):
        """Cancel a watch on a key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireLock(self, request, context):
        """Lock API 

        The lock API allows client to acquire, release and put watches on locks.
        Clients are notified when it has acquired a lock. These notifications do
        not come directly in the rpc response, instead they are delivered as part
        of Keep Alive responses. Thus responses for most rpcs will be empty.

        Register an interest in acquiring a lock. Server wil notify via Keep Alive
        response when the lock is granted or acquired.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseLock(self, request, context):
        """Release a previously acquired lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchLockHolders(self, request, context):
        """Fetch information about all the current lock holders.
        There can be more than one lock holder only if the lock is acquired in a
        non-exclusive mode.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLock(self, request, context):
        """Register a watch on the lock. Server will notify via Keep Alive response
        whenever ownership of lock changes. For non-exclusive acquisition, clients
        will be notified only for the first non-exclusive acquisition.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelWatchLock(self, request, context):
        """Cancel the watch on the lock.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AtomicIncrement(self, request, context):
        """AtomicIncrement key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransformKey(self, request, context):
        """TransformKey Operation for key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterLiveness(self, request, context):
        """Liveness API 

        Liveness APi allows constituents to register themselves, and allows others
        to monitor their liveness. In order to monitor a specific set of
        constituents, a namespace should be used for registering and monitoring.

        Register the liveness of a given constituent identified by an id in a
        given namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLiveness(self, request, context):
        """Register a watch on a namespace. Server will notify client via Keep Alive
        response if a new constituent registers liveness or if an registered
        constituent is no longer alive.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelWatchLiveness(self, request, context):
        """Cancel the watch on the namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchLive(self, request, context):
        """Fetch a list of constituents registered in a given namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupConstituentHealth(self, request, context):
        """Lookup health of a given constituent in a given namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupConstituentStats(self, request, context):
        """Lookup stats of a given constituent in a given namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordOpClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveOpClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchOpClocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCachedOpClocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMaster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaster,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterResult.SerializeToString,
            ),
            'ReserveSessionId': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveSessionId,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdResult.SerializeToString,
            ),
            'EstablishSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EstablishSession,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionResult.SerializeToString,
            ),
            'FindHealthySessions': grpc.unary_unary_rpc_method_handler(
                    servicer.FindHealthySessions,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsResult.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionResult.SerializeToString,
            ),
            'KeepAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.KeepAlive,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveResult.SerializeToString,
            ),
            'RegisterSession': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSession,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionResult.SerializeToString,
            ),
            'UpdateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyResult.SerializeToString,
            ),
            'LookupKey': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyResult.SerializeToString,
            ),
            'DeleteKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyResult.SerializeToString,
            ),
            'WatchKey': grpc.unary_unary_rpc_method_handler(
                    servicer.WatchKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyResult.SerializeToString,
            ),
            'CancelWatchKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelWatchKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyResult.SerializeToString,
            ),
            'AcquireLock': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireLock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockResult.SerializeToString,
            ),
            'ReleaseLock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseLock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockResult.SerializeToString,
            ),
            'FetchLockHolders': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchLockHolders,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersResult.SerializeToString,
            ),
            'WatchLock': grpc.unary_unary_rpc_method_handler(
                    servicer.WatchLock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockResult.SerializeToString,
            ),
            'CancelWatchLock': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelWatchLock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockResult.SerializeToString,
            ),
            'AtomicIncrement': grpc.unary_unary_rpc_method_handler(
                    servicer.AtomicIncrement,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementResult.SerializeToString,
            ),
            'TransformKey': grpc.unary_unary_rpc_method_handler(
                    servicer.TransformKey,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyResult.SerializeToString,
            ),
            'RegisterLiveness': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterLiveness,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessResult.SerializeToString,
            ),
            'WatchLiveness': grpc.unary_unary_rpc_method_handler(
                    servicer.WatchLiveness,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessResult.SerializeToString,
            ),
            'CancelWatchLiveness': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelWatchLiveness,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessResult.SerializeToString,
            ),
            'FetchLive': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchLive,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveResult.SerializeToString,
            ),
            'LookupConstituentHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupConstituentHealth,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthResult.SerializeToString,
            ),
            'LookupConstituentStats': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupConstituentStats,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsResult.SerializeToString,
            ),
            'RecordOpClock': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordOpClock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockResult.SerializeToString,
            ),
            'RemoveOpClock': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveOpClock,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockResult.SerializeToString,
            ),
            'FetchOpClocks': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchOpClocks,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksResult.SerializeToString,
            ),
            'FetchCachedOpClocks': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCachedOpClocks,
                    request_deserializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksArg.FromString,
                    response_serializer=gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.gandalf.server.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.gandalf.server.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """Service declarations 

    """

    @staticmethod
    def GetMaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/GetMaster',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.GetMasterResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReserveSessionId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/ReserveSessionId',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReserveSessionIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EstablishSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/EstablishSession',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.EstablishSessionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindHealthySessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/FindHealthySessions',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FindHealthySessionsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/CloseSession',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CloseSessionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KeepAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/KeepAlive',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.KeepAliveResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/RegisterSession',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterSessionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/UpdateKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.UpdateKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/LookupKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/DeleteKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.DeleteKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/WatchKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelWatchKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/CancelWatchKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcquireLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/AcquireLock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.AcquireLockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/ReleaseLock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.ReleaseLockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchLockHolders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/FetchLockHolders',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLockHoldersResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/WatchLock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelWatchLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/CancelWatchLock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AtomicIncrement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/AtomicIncrement',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.AtomicIncrementResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransformKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/TransformKey',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.TransformKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterLiveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/RegisterLiveness',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RegisterLivenessResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLiveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/WatchLiveness',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.WatchLivenessResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelWatchLiveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/CancelWatchLiveness',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.CancelWatchLivenessResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchLive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/FetchLive',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchLiveResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupConstituentHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/LookupConstituentHealth',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentHealthResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupConstituentStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/LookupConstituentStats',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.LookupConstituentStatsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordOpClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/RecordOpClock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RecordOpClockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveOpClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/RemoveOpClock',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.RemoveOpClockResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchOpClocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/FetchOpClocks',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchOpClocksResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchCachedOpClocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.gandalf.server.stub.RpcService/FetchCachedOpClocks',
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksArg.SerializeToString,
            gandalf_dot_server_dot_stub_dot_gandalf__pb2.FetchCachedOpClocksResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
