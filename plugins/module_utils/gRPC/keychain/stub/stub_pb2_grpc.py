# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from keychain.base import keychain_pb2 as keychain_dot_base_dot_keychain__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in keychain/stub/stub_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetKEK = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/GetKEK',
                request_serializer=keychain_dot_base_dot_keychain__pb2.EntityId.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.GetKeyResult.FromString,
                _registered_method=True)
        self.StartDiskKeyRotation = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/StartDiskKeyRotation',
                request_serializer=keychain_dot_base_dot_keychain__pb2.KeyRotationArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.StartDiskKeyRotationResult.FromString,
                _registered_method=True)
        self.FinalizeDiskKeyRotation = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/FinalizeDiskKeyRotation',
                request_serializer=keychain_dot_base_dot_keychain__pb2.KeyRotationArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.FinalizeDiskKeyRotationResult.FromString,
                _registered_method=True)
        self.ImportKey = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/ImportKey',
                request_serializer=keychain_dot_base_dot_keychain__pb2.ImportKeyArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.ImportKeyResult.FromString,
                _registered_method=True)
        self.DestroyKey = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/DestroyKey',
                request_serializer=keychain_dot_base_dot_keychain__pb2.EntityId.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.DestroyKeyResult.FromString,
                _registered_method=True)
        self.GetDEKForEntity = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/GetDEKForEntity',
                request_serializer=keychain_dot_base_dot_keychain__pb2.GetDekForEntityArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekForEntityResult.FromString,
                _registered_method=True)
        self.GetKeyIDForEntity = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/GetKeyIDForEntity',
                request_serializer=keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityResult.FromString,
                _registered_method=True)
        self.DecryptEDEK = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/DecryptEDEK',
                request_serializer=keychain_dot_base_dot_keychain__pb2.DecryptEdekArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.DecryptEdekResult.FromString,
                _registered_method=True)
        self.GetDEKForKeyID = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/GetDEKForKeyID',
                request_serializer=keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdResult.FromString,
                _registered_method=True)
        self.GetDEKMetadata = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/GetDEKMetadata',
                request_serializer=keychain_dot_base_dot_keychain__pb2.GetDekMetadataArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekMetadataResult.FromString,
                _registered_method=True)
        self.UploadKeyFile = channel.unary_unary(
                '/cohesity.keychain.stub.RpcService/UploadKeyFile',
                request_serializer=keychain_dot_base_dot_keychain__pb2.UploadKeyFileArg.SerializeToString,
                response_deserializer=keychain_dot_base_dot_keychain__pb2.UploadKeyFileResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetKEK(self, request, context):
        """Sent by the keychain client to retrieve a key encryption key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDiskKeyRotation(self, request, context):
        """Sent by the keychain client to start SED disk key rotation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeDiskKeyRotation(self, request, context):
        """Sent by the keychain client to finalize SED disk key rotation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportKey(self, request, context):
        """Sent by the keychain client to import a key for an entity object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyKey(self, request, context):
        """Sent by the keychain client to destroy the key related to an object
        specified by EntityId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDEKForEntity(self, request, context):
        """Sent by keychain client to retrieve the DEK (Data Encryption Key) to be
        used by an entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyIDForEntity(self, request, context):
        """Sent by keychain client to retrieve the key id corresponding to an entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptEDEK(self, request, context):
        """Sent by keychain client to decrypt an EDEK (Encrypted Data Encryption Key)
        and return the corresponding plaintext DEK.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDEKForKeyID(self, request, context):
        """Sent by keychain client to retrieve the DEK corresponding to a key id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDEKMetadata(self, request, context):
        """Sent by keychain client to retrieve DEK metadata for a key id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadKeyFile(self, request, context):
        """Sent by Iris to upload a key file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetKEK': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKEK,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.EntityId.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.GetKeyResult.SerializeToString,
            ),
            'StartDiskKeyRotation': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDiskKeyRotation,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.KeyRotationArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.StartDiskKeyRotationResult.SerializeToString,
            ),
            'FinalizeDiskKeyRotation': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeDiskKeyRotation,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.KeyRotationArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.FinalizeDiskKeyRotationResult.SerializeToString,
            ),
            'ImportKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportKey,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.ImportKeyArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.ImportKeyResult.SerializeToString,
            ),
            'DestroyKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyKey,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.EntityId.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.DestroyKeyResult.SerializeToString,
            ),
            'GetDEKForEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDEKForEntity,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekForEntityArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.GetDekForEntityResult.SerializeToString,
            ),
            'GetKeyIDForEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeyIDForEntity,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityResult.SerializeToString,
            ),
            'DecryptEDEK': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptEDEK,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.DecryptEdekArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.DecryptEdekResult.SerializeToString,
            ),
            'GetDEKForKeyID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDEKForKeyID,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdResult.SerializeToString,
            ),
            'GetDEKMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDEKMetadata,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.GetDekMetadataArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.GetDekMetadataResult.SerializeToString,
            ),
            'UploadKeyFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadKeyFile,
                    request_deserializer=keychain_dot_base_dot_keychain__pb2.UploadKeyFileArg.FromString,
                    response_serializer=keychain_dot_base_dot_keychain__pb2.UploadKeyFileResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.keychain.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.keychain.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetKEK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/GetKEK',
            keychain_dot_base_dot_keychain__pb2.EntityId.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.GetKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartDiskKeyRotation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/StartDiskKeyRotation',
            keychain_dot_base_dot_keychain__pb2.KeyRotationArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.StartDiskKeyRotationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinalizeDiskKeyRotation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/FinalizeDiskKeyRotation',
            keychain_dot_base_dot_keychain__pb2.KeyRotationArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.FinalizeDiskKeyRotationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImportKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/ImportKey',
            keychain_dot_base_dot_keychain__pb2.ImportKeyArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.ImportKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/DestroyKey',
            keychain_dot_base_dot_keychain__pb2.EntityId.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.DestroyKeyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDEKForEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/GetDEKForEntity',
            keychain_dot_base_dot_keychain__pb2.GetDekForEntityArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.GetDekForEntityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeyIDForEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/GetKeyIDForEntity',
            keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.GetKeyIdForEntityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DecryptEDEK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/DecryptEDEK',
            keychain_dot_base_dot_keychain__pb2.DecryptEdekArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.DecryptEdekResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDEKForKeyID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/GetDEKForKeyID',
            keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.GetDekForKeyIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDEKMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/GetDEKMetadata',
            keychain_dot_base_dot_keychain__pb2.GetDekMetadataArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.GetDekMetadataResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadKeyFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.keychain.stub.RpcService/UploadKeyFile',
            keychain_dot_base_dot_keychain__pb2.UploadKeyFileArg.SerializeToString,
            keychain_dot_base_dot_keychain__pb2.UploadKeyFileResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
