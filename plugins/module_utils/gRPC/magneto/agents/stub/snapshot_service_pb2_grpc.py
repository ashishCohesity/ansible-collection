# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from magneto.agents.stub import snapshot_service_pb2 as magneto_dot_agents_dot_stub_dot_snapshot__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in magneto/agents/stub/snapshot_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class SnapshotServiceStub(object):
    """
    RPC Service implementation by the usermode agent. A typical flow to take a
    backup is as follows:
    - Client (typically magneto) will decide to snapshot some volumes.
    - It will send a SnapshotVolumesRequest to the agent.
    - The agent will take a snapshot, and keep that alive along with changes
    bitmap.
    - Client will then read off the changed bytes (using another RPC interface
    that's not covered here).
    - Client should then Release the concerned snapshots to free up resources
    on the agent.
    It is OK to call ReleaseSnapshots on snapshots that agent may not have.
    Typical (current) agent implementations will keep at most 1 snapshot open
    for a volume.
    The client may optionally use the QueryVolumes RPC to figure out the
    volumes, or to query the state of last snapshots.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryVolumes = channel.unary_unary(
                '/cohesity.magneto.agents.stub.SnapshotService/QueryVolumes',
                request_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesResult.FromString,
                _registered_method=True)
        self.SnapshotVolumes = channel.unary_unary(
                '/cohesity.magneto.agents.stub.SnapshotService/SnapshotVolumes',
                request_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesResult.FromString,
                _registered_method=True)
        self.ReleaseSnapshots = channel.unary_unary(
                '/cohesity.magneto.agents.stub.SnapshotService/ReleaseSnapshots',
                request_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsResult.FromString,
                _registered_method=True)
        self.StopTrackingVolume = channel.unary_unary(
                '/cohesity.magneto.agents.stub.SnapshotService/StopTrackingVolume',
                request_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeArg.SerializeToString,
                response_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeResult.FromString,
                _registered_method=True)


class SnapshotServiceServicer(object):
    """
    RPC Service implementation by the usermode agent. A typical flow to take a
    backup is as follows:
    - Client (typically magneto) will decide to snapshot some volumes.
    - It will send a SnapshotVolumesRequest to the agent.
    - The agent will take a snapshot, and keep that alive along with changes
    bitmap.
    - Client will then read off the changed bytes (using another RPC interface
    that's not covered here).
    - Client should then Release the concerned snapshots to free up resources
    on the agent.
    It is OK to call ReleaseSnapshots on snapshots that agent may not have.
    Typical (current) agent implementations will keep at most 1 snapshot open
    for a volume.
    The client may optionally use the QueryVolumes RPC to figure out the
    volumes, or to query the state of last snapshots.
    """

    def QueryVolumes(self, request, context):
        """Method to query the volumes and their last known state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SnapshotVolumes(self, request, context):
        """Method to take snapshots of selected volumes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseSnapshots(self, request, context):
        """Method to release snapshots taken by SnapshotVolumes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTrackingVolume(self, request, context):
        """Method to stock tracking a particular volume.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SnapshotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryVolumes': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryVolumes,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesResult.SerializeToString,
            ),
            'SnapshotVolumes': grpc.unary_unary_rpc_method_handler(
                    servicer.SnapshotVolumes,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesResult.SerializeToString,
            ),
            'ReleaseSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseSnapshots,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsResult.SerializeToString,
            ),
            'StopTrackingVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTrackingVolume,
                    request_deserializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeArg.FromString,
                    response_serializer=magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.magneto.agents.stub.SnapshotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.magneto.agents.stub.SnapshotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SnapshotService(object):
    """
    RPC Service implementation by the usermode agent. A typical flow to take a
    backup is as follows:
    - Client (typically magneto) will decide to snapshot some volumes.
    - It will send a SnapshotVolumesRequest to the agent.
    - The agent will take a snapshot, and keep that alive along with changes
    bitmap.
    - Client will then read off the changed bytes (using another RPC interface
    that's not covered here).
    - Client should then Release the concerned snapshots to free up resources
    on the agent.
    It is OK to call ReleaseSnapshots on snapshots that agent may not have.
    Typical (current) agent implementations will keep at most 1 snapshot open
    for a volume.
    The client may optionally use the QueryVolumes RPC to figure out the
    volumes, or to query the state of last snapshots.
    """

    @staticmethod
    def QueryVolumes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.SnapshotService/QueryVolumes',
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.QueryVolumesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SnapshotVolumes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.SnapshotService/SnapshotVolumes',
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.SnapshotVolumesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.SnapshotService/ReleaseSnapshots',
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.ReleaseSnapshotsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopTrackingVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.agents.stub.SnapshotService/StopTrackingVolume',
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeArg.SerializeToString,
            magneto_dot_agents_dot_stub_dot_snapshot__service__pb2.StopTrackingVolumeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
