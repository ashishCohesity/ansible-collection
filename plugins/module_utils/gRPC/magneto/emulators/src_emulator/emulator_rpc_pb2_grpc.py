# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from magneto.emulators.src_emulator import emulator_rpc_pb2 as magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in magneto/emulators/src_emulator/emulator_rpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class EmulatorStub(object):
    """-----------------------------------------------------------------------------

    The emulator service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/Ping',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingRequest.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingReply.FromString,
                _registered_method=True)
        self.ExecuteSQLStatement = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/ExecuteSQLStatement',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementResponse.FromString,
                _registered_method=True)
        self.GetInstanceNameToIdMap = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetInstanceNameToIdMap',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapResponse.FromString,
                _registered_method=True)
        self.IsInstanceOnline = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/IsInstanceOnline',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineResponse.FromString,
                _registered_method=True)
        self.GetInstanceId = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetInstanceId',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdResponse.FromString,
                _registered_method=True)
        self.GetCommand = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetCommand',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandResponse.FromString,
                _registered_method=True)
        self.CompleteCommand = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CompleteCommand',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandResponse.FromString,
                _registered_method=True)
        self.CreateDeviceSet = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CreateDeviceSet',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetResponse.FromString,
                _registered_method=True)
        self.ConfigureDeviceSet = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/ConfigureDeviceSet',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetResponse.FromString,
                _registered_method=True)
        self.OpenDevice = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/OpenDevice',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceResponse.FromString,
                _registered_method=True)
        self.CloseDevice = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CloseDevice',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceResponse.FromString,
                _registered_method=True)
        self.GetProgress = channel.unary_unary(
                '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetProgress',
                request_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressArg.SerializeToString,
                response_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressResponse.FromString,
                _registered_method=True)


class EmulatorServicer(object):
    """-----------------------------------------------------------------------------

    The emulator service definition.
    """

    def Ping(self, request, context):
        """Send the ping to Emulator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteSQLStatement(self, request, context):
        """Sends an sql statement to emulator to execute.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstanceNameToIdMap(self, request, context):
        """Gets instance name to instance id map from the emulator server
        Currently in windows we query registry and in linux we send dummy data
        But in emulation we want instance list to be populated on the server side
        by the config file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsInstanceOnline(self, request, context):
        """RPC to query if the given instance is online or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstanceId(self, request, context):
        """RPC to query the instance id of given instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommand(self, request, context):
        """RPC's FOR VDI BACKUP/RESTORE FLOW

        Send GetCommand to emulator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteCommand(self, request, context):
        """Send CompleteCommmand to emulator to update the device state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeviceSet(self, request, context):
        """Create Deviceset state in emulator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDeviceSet(self, request, context):
        """Configure the deviceset state in emulator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDevice(self, request, context):
        """Open the device in emulator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDevice(self, request, context):
        """Remove the backup state for deviceset in Emulator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProgress(self, request, context):
        """Get the backup/restore percentage completed
        Returns status for the job completion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingRequest.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingReply.SerializeToString,
            ),
            'ExecuteSQLStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSQLStatement,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementResponse.SerializeToString,
            ),
            'GetInstanceNameToIdMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstanceNameToIdMap,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapResponse.SerializeToString,
            ),
            'IsInstanceOnline': grpc.unary_unary_rpc_method_handler(
                    servicer.IsInstanceOnline,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineResponse.SerializeToString,
            ),
            'GetInstanceId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstanceId,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdResponse.SerializeToString,
            ),
            'GetCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommand,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandResponse.SerializeToString,
            ),
            'CompleteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteCommand,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandResponse.SerializeToString,
            ),
            'CreateDeviceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeviceSet,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetResponse.SerializeToString,
            ),
            'ConfigureDeviceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDeviceSet,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetResponse.SerializeToString,
            ),
            'OpenDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDevice,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceResponse.SerializeToString,
            ),
            'CloseDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDevice,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceResponse.SerializeToString,
            ),
            'GetProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProgress,
                    request_deserializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressArg.FromString,
                    response_serializer=magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.magneto.connectors.emulators.golang.stub.Emulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.magneto.connectors.emulators.golang.stub.Emulator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Emulator(object):
    """-----------------------------------------------------------------------------

    The emulator service definition.
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/Ping',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingRequest.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.PingReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteSQLStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/ExecuteSQLStatement',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ExecuteSQLStatementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInstanceNameToIdMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetInstanceNameToIdMap',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceNameToIdMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsInstanceOnline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/IsInstanceOnline',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.IsInstanceOnlineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInstanceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetInstanceId',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetInstanceIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetCommand',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetCommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CompleteCommand',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CompleteCommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDeviceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CreateDeviceSet',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CreateDeviceSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureDeviceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/ConfigureDeviceSet',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.ConfigureDeviceSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/OpenDevice',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.OpenDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/CloseDevice',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.CloseDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magneto.connectors.emulators.golang.stub.Emulator/GetProgress',
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressArg.SerializeToString,
            magneto_dot_emulators_dot_src__emulator_dot_emulator__rpc__pb2.GetProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
