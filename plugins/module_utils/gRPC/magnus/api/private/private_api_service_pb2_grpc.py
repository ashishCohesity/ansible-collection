# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from magnus.api.private import private_api_args_pb2 as magnus_dot_api_dot_private_dot_private__api__args__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in magnus/api/private/private_api_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MagnusPrivateApiServiceStub(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by Magnus server for actor.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchIncarnationId = channel.unary_unary(
                '/cohesity.magnus.api.MagnusPrivateApiService/FetchIncarnationId',
                request_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdArg.SerializeToString,
                response_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdResult.FromString,
                _registered_method=True)
        self.RegisterActor = channel.unary_unary(
                '/cohesity.magnus.api.MagnusPrivateApiService/RegisterActor',
                request_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorArg.SerializeToString,
                response_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorResult.FromString,
                _registered_method=True)
        self.ActorToServerHeartbeat = channel.unary_unary(
                '/cohesity.magnus.api.MagnusPrivateApiService/ActorToServerHeartbeat',
                request_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatArg.SerializeToString,
                response_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatResult.FromString,
                _registered_method=True)
        self.ActorToServerUpdate = channel.unary_unary(
                '/cohesity.magnus.api.MagnusPrivateApiService/ActorToServerUpdate',
                request_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateArg.SerializeToString,
                response_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateResult.FromString,
                _registered_method=True)
        self.FetchWorkFromServer = channel.unary_unary(
                '/cohesity.magnus.api.MagnusPrivateApiService/FetchWorkFromServer',
                request_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerArg.SerializeToString,
                response_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerResult.FromString,
                _registered_method=True)


class MagnusPrivateApiServiceServicer(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by Magnus server for actor.

    """

    def FetchIncarnationId(self, request, context):
        """Used by actor to fetch a monotonically increasing ID from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterActor(self, request, context):
        """Register actor with Magnus server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActorToServerHeartbeat(self, request, context):
        """RPC used by actor to send a periodic heartbeat to server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActorToServerUpdate(self, request, context):
        """RPC used by actor to send updates about active tasks on the actor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchWorkFromServer(self, request, context):
        """RPC used by actor to fetch any work from server. This RPC is kept on
        hold by the server and result is returned when there is data available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MagnusPrivateApiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchIncarnationId': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchIncarnationId,
                    request_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdArg.FromString,
                    response_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdResult.SerializeToString,
            ),
            'RegisterActor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterActor,
                    request_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorArg.FromString,
                    response_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorResult.SerializeToString,
            ),
            'ActorToServerHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ActorToServerHeartbeat,
                    request_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatArg.FromString,
                    response_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatResult.SerializeToString,
            ),
            'ActorToServerUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ActorToServerUpdate,
                    request_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateArg.FromString,
                    response_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateResult.SerializeToString,
            ),
            'FetchWorkFromServer': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchWorkFromServer,
                    request_deserializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerArg.FromString,
                    response_serializer=magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.magnus.api.MagnusPrivateApiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.magnus.api.MagnusPrivateApiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MagnusPrivateApiService(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by Magnus server for actor.

    """

    @staticmethod
    def FetchIncarnationId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magnus.api.MagnusPrivateApiService/FetchIncarnationId',
            magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdArg.SerializeToString,
            magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchIncarnationIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magnus.api.MagnusPrivateApiService/RegisterActor',
            magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorArg.SerializeToString,
            magnus_dot_api_dot_private_dot_private__api__args__pb2.RegisterActorResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActorToServerHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magnus.api.MagnusPrivateApiService/ActorToServerHeartbeat',
            magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatArg.SerializeToString,
            magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerHeartbeatResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActorToServerUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magnus.api.MagnusPrivateApiService/ActorToServerUpdate',
            magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateArg.SerializeToString,
            magnus_dot_api_dot_private_dot_private__api__args__pb2.ActorToServerUpdateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchWorkFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.magnus.api.MagnusPrivateApiService/FetchWorkFromServer',
            magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerArg.SerializeToString,
            magnus_dot_api_dot_private_dot_private__api__args__pb2.FetchWorkFromServerResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
