# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: magnus/api/v1/public_vmware_data.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from magnus.base import error_pb2 as magnus_dot_base_dot_error__pb2
from magnus.api.v1 import public_common_data_pb2 as magnus_dot_api_dot_v1_dot_public__common__data__pb2
from magnus.api.protoc_gen_openapiv2.options import annotations_pb2 as magnus_dot_api_dot_protoc__gen__openapiv2_dot_options_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n&magnus/api/v1/public_vmware_data.proto\x12\x16\x63ohesity.magnus.api.v1\x1a\x17magnus/base/error.proto\x1a&magnus/api/v1/public_common_data.proto\x1a\x39magnus/api/protoc-gen-openapiv2/options/annotations.proto\"\x8f\x07\n\x1dMountVMwareNasDatastoreParams\x12\xdb\x01\n\x13resource_pool_moref\x18\x01 \x01(\tB\xbd\x01\x92\x41\xb9\x01\x32\xb6\x01Managed Object Reference(MORef) of the VMware resource pool where this datastore should be mounted. The datastore will be mounted on all the ESXi hosts present in this resource pool.\x12\xf9\x01\n\x0bremote_host\x18\x02 \x01(\tB\xe3\x01\x92\x41\xdf\x01\x32\xdc\x01The IP address or DNS name that should be used for mounting the datastore on vCenter resource pools. User should ideally provide the Cohesity VIP here. Using VIP address will help load balance data path load on Cohesity.\x12\x82\x01\n\x0bremote_path\x18\x03 \x01(\tBm\x92\x41j2hThe NFS mount path where the NFS datastore can be accessed. This is the path where VM disks are present.\x12y\n\x0e\x64\x61tastore_name\x18\x04 \x01(\tBa\x92\x41^2\\The name for this datastore. Magnus will use this name to identify the datastore on vCenter.:\x93\x01\x92\x41\x8f\x01\n\x8c\x01*\x1aMount VMware NAS datastore2nRequest to mount a NAS datastore on VMware vCenter. Mounting a NAS datastore automatically creates in vCenter.\"\xdb\x02\n\x1dMountVMwareNasDatastoreResult\x12:\n\x0e\x64\x61tastore_name\x18\x01 \x01(\tB\"\x92\x41\x1f\x32\x1dName of the VMware datastore.\x12\xa5\x01\n\x0f\x64\x61tastore_moref\x18\x02 \x01(\tB\x8b\x01\x92\x41\x87\x01\x32\x84\x01Managed object reference of the datastore. This can be used to further operations on datastore such as vMotion, unmount, delete etc.:V\x92\x41S\nQ*\x10VMware datastore2=An object encapuslating information about a VMware datastore \"\x8a\x03\n\x1fUnmountVMwareNasDatastoreParams\x12\x45\n\x0f\x64\x61tastore_moref\x18\x01 \x01(\tB,\x92\x41)2\'MORef of the datastore to be unmounted.:\x9f\x02\x92\x41\x9b\x02\n\x98\x02*\x1fUnmount a VMware NAS Datastore.2\xf4\x01Request to unmount VMware NAS datastore from all the ESXi hosts that it is mounted on. Datastore can be unmounted if no VMs are present on the datastore. Unmounting a NAS datastore automatically deletes it from vCenter after unmounting is done.\"Q\n\x15VMwareDatastoreAction\"8\n\x04Type\x12\x16\n\x12kMountNasDatastore\x10\x00\x12\x18\n\x14kUnmountNasDatastore\x10\x01\"\xe8\x07\n\x18VMwareDatastoreActionArg\x12\xda\x01\n\x07task_id\x18\x01 \x01(\tB\xc8\x01\x92\x41\xc4\x01\x32\xc1\x01\x43lient provided Task ID. This is expected to be unique among all task requests that are submitted to Magnus. Clients can fetch the status of the task using this task ID if the task is accepted.\x12\xcf\x01\n\x15registered_vcenter_id\x18\x02 \x01(\x03\x42\xaf\x01\x92\x41\xab\x01\x32\x9e\x01\x45ntity ID of the vCenter on which the datastore exists. This ID is used to communicate with Magneto to fetch user provided data such as username and password.\xa2\x02\x07integer\x12p\n\x06\x61\x63tion\x18\x03 \x01(\x0e\x32\x32.cohesity.magnus.api.v1.VMwareDatastoreAction.TypeB,\x92\x41)2\'Action to be taken on VMware datastore.\x12\x8b\x01\n\x1amount_nas_datastore_params\x18\x04 \x01(\x0b\x32\x35.cohesity.magnus.api.v1.MountVMwareNasDatastoreParamsB0\x92\x41-2+Parameters to mount a VMware NAS datastore.\x12\x91\x01\n\x1cunmount_nas_datastore_params\x18\x05 \x01(\x0b\x32\x37.cohesity.magnus.api.v1.UnmountVMwareNasDatastoreParamsB2\x92\x41/2-Parameters to unmount a VMware NAS datastore.:\x88\x01\x92\x41\x84\x01\n\x81\x01*$Perform actions on VMware datastore.2YRequest to perform various actions on VMware datastore.Actions include create and delete.\"\xa1\x04\n\x1bVMwareDatastoreActionResult\x12\x9c\x01\n\x05\x65rror\x18\x01 \x01(\x0b\x32\x1b.cohesity.magnus.ErrorProtoBp\x92\x41m2kAny error encountered while validating the task. If the task passed validation, this field will not be set.\x12s\n\x07task_id\x18\x02 \x01(\tBb\x92\x41_2]Task ID of the datastore action request. This ID should be used to determine the task status.\x12j\n\x06\x61\x63tion\x18\x03 \x01(\x0e\x32\x32.cohesity.magnus.api.v1.VMwareDatastoreAction.TypeB&\x92\x41#2!Action taken on VMware datastore.:\x81\x01\x92\x41~\n|*)Result of VMware datastore action request2OData returned by Magnus service on receiving a VMware datastore action request.\"\xd0\x02\n\"VMwareDatastoreActionTaskStatusArg\x12_\n\x07task_id\x18\x01 \x01(\tBN\x92\x41K2ITask ID returned to the client while submitting datastore action request.:\xc8\x01\x92\x41\xc4\x01\n\xc1\x01*%VMware datastore task status argument2\x97\x01\x43heck status of VMware datatstore task in Magnus. Clients can poll Magnus with this request to check if the appropriate datastore action has completed.\"@\n\nTaskStatus\"2\n\x04Type\x12\r\n\tkAccepted\x10\x00\x12\x0c\n\x08kRunning\x10\x01\x12\r\n\tkFinished\x10\x02\"\xc9\x05\n%VMwareDatastoreActionTaskStatusResult\x12>\n\x07task_id\x18\x01 \x01(\tB-\x92\x41*2(Task ID of the datastore action request.\x12\x66\n\x05\x65rror\x18\x02 \x01(\x0b\x32\x1b.cohesity.magnus.ErrorProtoB:\x92\x41\x37\x32\x35\x41ny error encountered by the task during its runtime.\x12g\n\x06status\x18\x03 \x01(\x0e\x32\'.cohesity.magnus.api.v1.TaskStatus.TypeB.\x92\x41+2)The current status of the task in Magnus.\x12w\n\x06\x61\x63tion\x18\x04 \x01(\x0e\x32\x32.cohesity.magnus.api.v1.VMwareDatastoreAction.TypeB3\x92\x41\x30\x32.Action type for this task on VMware datastore.\x12\xbe\x01\n\x1amount_nas_datastore_result\x18\x05 \x01(\x0b\x32\x35.cohesity.magnus.api.v1.MountVMwareNasDatastoreResultBc\x92\x41`2^VMware datastore mounted if this was a mount NAS datatstore request and the request succeeded.:U\x92\x41R\nP*\x1cVMware datastore task status20Task status for VMware datastore action request.\"}\n\x11VMwareNetworkType\"6\n\x04Type\x12\x0c\n\x08kNetwork\x10\x01\x12 \n\x1ckDistributedVirtualPortgroup\x10\x02:0\x92\x41-\n+*\x13VMware network type2\x14VMware Network type.\"\x95\t\n\x14\x43reateVMwareVMParams\x12\xc6\x01\n\x13resource_pool_moref\x18\x01 \x01(\tB\xa8\x01\x92\x41\xa4\x01\x32\xa1\x01Managed Object Reference(MORef) of the VMware resource pool where this VM should be created. VM will be created on one of the hosts present in the resource pool.\x12x\n\x0f\x64\x61tastore_moref\x18\x02 \x01(\tB_\x92\x41\\2ZManaged Object Reference(MORef) of the VMware datastore where VMware VM disks are present.\x12O\n\x0evm_folder_name\x18\x03 \x01(\tB7\x92\x41\x34\x32\x32Name of the folder where the VM should be created.\x12\x84\x01\n\x0cnetwork_type\x18\t \x01(\x0e\x32..cohesity.magnus.api.v1.VMwareNetworkType.TypeB>\x92\x41;29Network type of the network to be assocatied with the VM.\x12\xbc\x01\n\rnetwork_moref\x18\x04 \x01(\tB\xa4\x01\x92\x41\xa0\x01\x32\x9d\x01Managed Object Reference(MORef) of the vCenter network to which the VM adapters should be attached to. If this is not specified, VM adapters will be removed.\x12Y\n\x10\x63loned_view_name\x18\x05 \x01(\tB?\x92\x41<2:Name of the view where the backup VM disks were cloned to.\x12r\n\x19\x63loned_view_data_dir_path\x18\x06 \x01(\tBO\x92\x41L2JPath in the cloned view where VM disks and configutaion files are present.\x12\x33\n\x07vm_name\x18\x07 \x01(\tB\"\x92\x41\x1f\x32\x1dName of the VM to be created.\x12N\n\x0e\x64\x61tastore_name\x18\x08 \x01(\tB6\x92\x41\x33\x32\x31Name of the datastore where VM disks are present.:O\x92\x41L\nJ*\x16\x43reate VM on a vCenter20Request to create VM on vCenter given its config\"\xa4\x03\n\x14\x43reateVMwareVMResult\x12P\n\x08vm_moref\x18\x01 \x01(\tB>\x92\x41;29Managed Object Reference(MORef) of the VMware VM created.\x12H\n\x07vm_uuid\x18\x02 \x01(\tB7\x92\x41\x34\x32\x32UUID of the created VMware VM assigned by vCenter.\x12N\n\x0e\x65sxi_host_name\x18\x03 \x01(\tB6\x92\x41\x33\x32\x31VMware ESXi hostname on which the VM was created.\x12k\n\x0f\x65sxi_host_moref\x18\x04 \x01(\tBR\x92\x41O2MManaged Object Reference of the VMware ESXi host on which the VM was created.:3\x92\x41\x30\n.*\tVMware VM2!Data associated with a VMWare VM.\"\xcc\x01\n\x14\x44\x65leteVMwareVMParams\x12\x62\n\x08vm_moref\x18\x01 \x01(\tBP\x92\x41M2KManaged Object Reference(MORef) of the VMware VM which needs to be deleted.:P\x92\x41M\nK*\x16\x44\x65lete VM on a vCenter21Request to delete a VM on vCenter given its MORef\"n\n\rVMPowerStatus\"#\n\x04Type\x12\x0c\n\x08kPowerOn\x10\x00\x12\r\n\tkPowerOff\x10\x01:8\x92\x41\x35\n3*\x0fVM power status2 Power status for of a VMware VM.\"\xe7\x02\n\x1cSetVMwareVMPowerStatusParams\x12o\n\x08vm_moref\x18\x01 \x01(\tB]\x92\x41Z2XManaged Object Reference(MORef) of the VMware VM whose power status need to be altered. \x12q\n\x0cpower_status\x18\x02 \x01(\x0e\x32*.cohesity.magnus.api.v1.VMPowerStatus.TypeB/\x92\x41,2*Power status to be set on the provided VM.:c\x92\x41`\n^*#Power on/off a VM on VMware vCenter27Request to set power status for a VM on VMware vCenter.\"\\\n\x07GuestOS\" \n\x04Type\x12\n\n\x06kLinux\x10\x00\x12\x0c\n\x08kWindows\x10\x01:/\x92\x41,\n**\x08Guest OS2\x1eGuest OS types of a VMware VM.\"\xc4\x0c\n ConfigureVMwareVMIPAddressParams\x12t\n\x08vm_moref\x18\x01 \x01(\tBb\x92\x41_2]Managed Object Reference(MORef) of the VMware VM on which IP addresses need to be configured.\x12\xeb\x02\n\x13\x61\x64\x61pter_ip_settings\x18\x02 \x03(\x0b\x32\x43.cohesity.magnus.api.v1.ConfigureVMwareVMIPAddressParams.IPSettingsB\x88\x02\x92\x41\x84\x02\x32\x81\x02Per adapter IP settings for the provided VM. The number of adapters in the VM must match with the number of entries in the field. If the MAC address for the adapter is not specified, these settings are applied in the order of the network adapters in the VM.\x12~\n\x08guest_os\x18\x03 \x01(\x0e\x32$.cohesity.magnus.api.v1.GuestOS.TypeBF\x92\x41\x43\x32\x41Guest OS of the VMware VM where the network settings are changed.\x12\x42\n\x0b\x64ns_servers\x18\x04 \x03(\tB-\x92\x41*2(List of DNS servers to be set in the VM.\x12K\n\x0c\x64ns_suffixes\x18\x05 \x03(\tB5\x92\x41\x32\x32\x30List of DNS search suffixes to be set in the VM.\x12x\n\x0b\x64omain_name\x18\x06 \x01(\tBc\x92\x41`2^Name of the domain to be set in the VM. This is set only for VMs with guest OS of type kLinux.\x12t\n\thost_name\x18\x07 \x01(\tBa\x92\x41^2\\Name of the host to be set in the VM. This is set only for VMs with guest OS of type kLinux.\x1a\xd4\x03\n\nIPSettings\x12\x64\n\x0bmac_address\x18\x01 \x01(\tBO\x92\x41L2JMAC Address for the VM network adapter whose settings need to be modified.\x12\x65\n\ruse_static_ip\x18\x02 \x01(\x08\x42N\x92\x41K2IWhether static IP address must be deployed on a specific network adapter.\x12p\n\nip_address\x18\x03 \x01(\tB\\\x92\x41Y2WIP address to be deployed on a specific network adapter. It must be a valid IP address.\x12K\n\x07netmask\x18\x04 \x01(\tB:\x92\x41\x37\x32\x35Netmask for the provided IP address for this adapter.\x12:\n\x07gateway\x18\x05 \x01(\tB)\x92\x41&2$Gateway IP address for this adapter.:d\x92\x41\x61\n_*\x1e\x43onfigure IP addresses on a VM2=Request to reconfigure a VMware VM with IP addresses provided\"\xb8\x05\n\x16PushFileVMwareVMParams\x12i\n\x08vm_moref\x18\x01 \x01(\tBW\x92\x41T2RManaged Object Reference(MORef) of the VMware VM on which file needs to be pushed.\x12j\n\x0evm_credentials\x18\x02 \x01(\x0b\x32#.cohesity.magnus.api.v1.CredentialsB-\x92\x41*2(Credentials to authenticate with the VM.\x12h\n\tfile_data\x18\x03 \x01(\x0c\x42U\x92\x41R2PThe contents of the file that needs to be pushed inside guest OS of a VMware VM.\x12Q\n\x10remote_file_path\x18\x04 \x01(\tB7\x92\x41\x34\x32\x32Remoted path for the file. This is the path on VM.\x12z\n\x08guest_os\x18\x05 \x01(\x0e\x32$.cohesity.magnus.api.v1.GuestOS.TypeBB\x92\x41?2=Guest OS of the VMware VM where this file needs to be pushed.:\x8d\x01\x92\x41\x89\x01\n\x86\x01*&Push file into guest OS of a VMWare VM2\\Request to push a file e.g script inside a VMWare VM.  Guest OS Windows/Linux are supported.\"\x89\x05\n\x18RunProgramVMwareVMParams\x12i\n\x08vm_moref\x18\x01 \x01(\tBW\x92\x41T2RManaged Object Reference(MORef) of the VMware VM on which file needs to be pushed.\x12j\n\x0evm_credentials\x18\x02 \x01(\x0b\x32#.cohesity.magnus.api.v1.CredentialsB-\x92\x41*2(Credentials to authenticate with the VM.\x12`\n\x16working_directory_path\x18\x03 \x01(\tB@\x92\x41=2;Working directory from where the program should be executed\x12N\n\x0cprogram_path\x18\x04 \x01(\tB8\x92\x41\x35\x32\x33\x46ull path of the program that needs to be executed.\x12Y\n\x0cprogram_args\x18\x05 \x01(\tBC\x92\x41@2>Arguments to be provided for the program that needs to be run.:\x88\x01\x92\x41\x84\x01\n\x81\x01*\x1aRun a program in VMWare VM2cRequest to run a program e.g script inside a VMWare VM. Guest OSes Windows and Linux are supported.\"\xbf\x02\n\x18RunProgramVMwareVMResult\x12\x45\n\x03pid\x18\x01 \x01(\x03\x42\x38\x92\x41\x35\x32\x33Process ID of the launched program in the guest OS.\x12z\n\texit_code\x18\x02 \x01(\x05\x42g\x92\x41\x64\x32\x62\x45xit code of the prgram executed. Success code 0. All other exit codes will be treated as errors. :`\x92\x41]\n[*%VMware VM guest OS program run status22Result of running a program in VMware VM guest OS.\"\xe3\x02\n\x16RelocateVMwareVMParams\x12\x64\n\x08vm_moref\x18\x01 \x01(\tBR\x92\x41O2MManaged Object Reference(MORef) of the VMware VM which needs to be relocated.\x12\\\n\x16target_datastore_moref\x18\x02 \x01(\tB<\x92\x41\x39\x32\x37Target datastore to which the VM should be migrated to.:\x84\x01\x92\x41\x80\x01\n~*\x12Relocate VMWare VM2hRequest to relocate a VMware VM from its current datastore to target datastore specified in the request.\"\x9d\x02\n\x16RelocateVMwareVMResult\x12U\n\x13progress_percentage\x18\x01 \x01(\rB8\x92\x41\x35\x32\x33Progress percentage of the vMotion task for the VM.\x12M\n\ntask_moref\x18\x02 \x01(\tB9\x92\x41\x36\x32\x34Managed object reference of the VMware vMotion task.:]\x92\x41Z\nX*\x19Relocate VMWare VM status2;Result of relocate VMware VM task and its current progress.\"\xd7\x02\n\x1e\x43heckVMwareVMCredentialsParams\x12m\n\x08vm_moref\x18\x01 \x01(\tB[\x92\x41X2VManaged Object Reference(MORef) of the VMware VM whose credentials need to be checked.\x12j\n\x0evm_credentials\x18\x02 \x01(\x0b\x32#.cohesity.magnus.api.v1.CredentialsB-\x92\x41*2(Credentials to authenticate with the VM.:Z\x92\x41W\nU*\x1b\x43heck VMware VM credentials26Request to check username and password of a VMware VM.\"\x9f\x01\n\x0eVMwareVMAction\"\x8c\x01\n\x04Type\x12\x0b\n\x07kCreate\x10\x00\x12\x0b\n\x07kDelete\x10\x01\x12\x12\n\x0ekReconfigureIP\x10\x02\x12\x10\n\x0ckPowerStatus\x10\x03\x12\r\n\tkPushFile\x10\x04\x12\x0f\n\x0bkRunProgram\x10\x05\x12\r\n\tkRelocate\x10\x06\x12\x15\n\x11kCheckCredentials\x10\x07\"\xa3\x12\n\x11VMwareVMActionArg\x12\xda\x01\n\x07task_id\x18\x01 \x01(\tB\xc8\x01\x92\x41\xc4\x01\x32\xc1\x01\x43lient provided Task ID. This is expected to be unique among all task requests that are submitted to Magnus. Clients can fetch the status of the task using this task ID if the task is accepted.\x12\xd2\x01\n\x15registered_vcenter_id\x18\x02 \x01(\x03\x42\xb2\x01\x92\x41\xae\x01\x32\xa1\x01\x45ntity ID of the vCenter on which the VM is to be created. This ID is used to communicate with Magneto to fetch user provided data such as username and password.\xa2\x02\x07integer\x12\xa4\x01\n\x06\x61\x63tion\x18\x03 \x01(\x0e\x32+.cohesity.magnus.api.v1.VMwareVMAction.TypeBg\x92\x41\x64\x32\x62\x41\x63tion to be taken for a VMware VM. These include create,delete, reconfiguration, relocation etc. \x12\xab\x01\n\rcreate_params\x18\x04 \x01(\x0b\x32,.cohesity.magnus.api.v1.CreateVMwareVMParamsBf\x92\x41\x63\x32\x61If this is a create request, this field specifies the parameters required for creation of the VM.\x12\xab\x01\n\rdelete_params\x18\x05 \x01(\x0b\x32,.cohesity.magnus.api.v1.DeleteVMwareVMParamsBf\x92\x41\x63\x32\x61If this is a delete request, this field specifies the parameters required for deletion of the VM.\x12\xf1\x01\n\x15reconfigure_ip_params\x18\x06 \x01(\x0b\x32\x38.cohesity.magnus.api.v1.ConfigureVMwareVMIPAddressParamsB\x97\x01\x92\x41\x93\x01\x32\x90\x01If this is a reconfiguration IP address request, this field specifies the parameters required for re-configuring each network adapter of the VM.\x12\xe7\x01\n\x13power_status_params\x18\x07 \x01(\x0b\x32\x34.cohesity.magnus.api.v1.SetVMwareVMPowerStatusParamsB\x93\x01\x92\x41\x8f\x01\x32\x8c\x01If this is a request to set VM power status, then this field specifies the parameters required for setting different power states of the VM.\x12\xd5\x01\n\x10push_file_params\x18\x08 \x01(\x0b\x32..cohesity.magnus.api.v1.PushFileVMwareVMParamsB\x8a\x01\x92\x41\x86\x01\x32\x83\x01If this is a push file request, this field specifies the parameters required for pushing a single file into the guest OS of the VM.\x12\xd8\x01\n\x12run_program_params\x18\t \x01(\x0b\x32\x30.cohesity.magnus.api.v1.RunProgramVMwareVMParamsB\x89\x01\x92\x41\x85\x01\x32\x82\x01If this is a start program request, this field specifies the parameters required for starting a process in the guest OS of the VM.\x12\xd9\x01\n\x0frelocate_params\x18\n \x01(\x0b\x32..cohesity.magnus.api.v1.RelocateVMwareVMParamsB\x8f\x01\x92\x41\x8b\x01\x32\x88\x01If this is a relocate VM request, this field specifies the parameters required for relocating a VMware VM from one datastore to another.\x12\xeb\x01\n\x18\x63heck_credentials_params\x18\x0b \x01(\x0b\x32\x36.cohesity.magnus.api.v1.CheckVMwareVMCredentialsParamsB\x90\x01\x92\x41\x8c\x01\x32\x89\x01\x46or a check VM credentials request, this field specifies the parameters required for validating the username and password for a given VM.\"\x87\x04\n\x14VMwareVMActionResult\x12\x9c\x01\n\x05\x65rror\x18\x01 \x01(\x0b\x32\x1b.cohesity.magnus.ErrorProtoBp\x92\x41m2kAny error encountered while validating the task. If the task passed validation, this field will not be set.\x12s\n\x07task_id\x18\x02 \x01(\tBb\x92\x41_2]Task ID of the VMware VM action request. This ID should be used to determine the task status.\x12p\n\x06\x61\x63tion\x18\x03 \x01(\x0e\x32+.cohesity.magnus.api.v1.VMwareVMAction.TypeB3\x92\x41\x30\x32.Action taken for a VMware VM for this task ID.:i\x92\x41\x66\nd*\x18VMware VM action request2HData returned by Magnus service on receiving a VMware VM action request.\"\xd7\x01\n\x1bVMwareVMActionTaskStatusArg\x12_\n\x07task_id\x18\x01 \x01(\tBN\x92\x41K2ITask ID returned to the client while submitting VMware VM action request.:W\x92\x41T\nR*%VMware VM action task status argument2)Check status of VMware VM task in Magnus.\"\xea\x08\n\x1eVMwareVMActionTaskStatusResult\x12_\n\x07task_id\x18\x01 \x01(\tBN\x92\x41K2ITask ID returned to the client while submitting VMware VM action request.\x12g\n\x06status\x18\x02 \x01(\x0e\x32\'.cohesity.magnus.api.v1.TaskStatus.TypeB.\x92\x41+2)The current status of the task in Magnus.\x12\x66\n\x05\x65rror\x18\x03 \x01(\x0b\x32\x1b.cohesity.magnus.ErrorProtoB:\x92\x41\x37\x32\x35\x41ny error encountered by the task during its runtime.\x12p\n\x06\x61\x63tion\x18\x04 \x01(\x0e\x32+.cohesity.magnus.api.v1.VMwareVMAction.TypeB3\x92\x41\x30\x32.Action taken for a VMware VM for this task ID.\x12\xce\x01\n\rcreate_result\x18\x05 \x01(\x0b\x32,.cohesity.magnus.api.v1.CreateVMwareVMResultB\x88\x01\x92\x41\x84\x01\x32\x81\x01If this was create VM was request, this field contains the resulting data from the request if the task was successfully finished.\x12\xb8\x01\n\x0frelocate_result\x18\x06 \x01(\x0b\x32..cohesity.magnus.api.v1.RelocateVMwareVMResultBo\x92\x41l2jIf this was relocate VM was request, this field contains the progress of storage vMotion of the VMware VM.\x12\xc5\x01\n\x12run_program_result\x18\x07 \x01(\x0b\x32\x30.cohesity.magnus.api.v1.RunProgramVMwareVMResultBw\x92\x41t2rIf this was run program VM was request, this field contains the PID and the exit code of the program that was run.:P\x92\x41M\nK*\x1cVMware VM action task status2+Current status of VMware VM task in Magnus.B\x1fZ\x1d\x63ohesity/magnus/api/v1;magnus')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'magnus.api.v1.public_vmware_data_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'Z\035cohesity/magnus/api/v1;magnus'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['resource_pool_moref']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['resource_pool_moref']._serialized_options = b'\222A\271\0012\266\001Managed Object Reference(MORef) of the VMware resource pool where this datastore should be mounted. The datastore will be mounted on all the ESXi hosts present in this resource pool.'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['remote_host']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['remote_host']._serialized_options = b'\222A\337\0012\334\001The IP address or DNS name that should be used for mounting the datastore on vCenter resource pools. User should ideally provide the Cohesity VIP here. Using VIP address will help load balance data path load on Cohesity.'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['remote_path']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['remote_path']._serialized_options = b'\222Aj2hThe NFS mount path where the NFS datastore can be accessed. This is the path where VM disks are present.'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['datastore_name']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['datastore_name']._serialized_options = b'\222A^2\\The name for this datastore. Magnus will use this name to identify the datastore on vCenter.'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTOREPARAMS']._serialized_options = b'\222A\217\001\n\214\001*\032Mount VMware NAS datastore2nRequest to mount a NAS datastore on VMware vCenter. Mounting a NAS datastore automatically creates in vCenter.'
  _globals['_MOUNTVMWARENASDATASTORERESULT'].fields_by_name['datastore_name']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTORERESULT'].fields_by_name['datastore_name']._serialized_options = b'\222A\0372\035Name of the VMware datastore.'
  _globals['_MOUNTVMWARENASDATASTORERESULT'].fields_by_name['datastore_moref']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTORERESULT'].fields_by_name['datastore_moref']._serialized_options = b'\222A\207\0012\204\001Managed object reference of the datastore. This can be used to further operations on datastore such as vMotion, unmount, delete etc.'
  _globals['_MOUNTVMWARENASDATASTORERESULT']._loaded_options = None
  _globals['_MOUNTVMWARENASDATASTORERESULT']._serialized_options = b'\222AS\nQ*\020VMware datastore2=An object encapuslating information about a VMware datastore '
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['datastore_moref']._loaded_options = None
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS'].fields_by_name['datastore_moref']._serialized_options = b'\222A)2\'MORef of the datastore to be unmounted.'
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS']._loaded_options = None
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS']._serialized_options = b'\222A\233\002\n\230\002*\037Unmount a VMware NAS Datastore.2\364\001Request to unmount VMware NAS datastore from all the ESXi hosts that it is mounted on. Datastore can be unmounted if no VMs are present on the datastore. Unmounting a NAS datastore automatically deletes it from vCenter after unmounting is done.'
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['task_id']._serialized_options = b'\222A\304\0012\301\001Client provided Task ID. This is expected to be unique among all task requests that are submitted to Magnus. Clients can fetch the status of the task using this task ID if the task is accepted.'
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['registered_vcenter_id']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['registered_vcenter_id']._serialized_options = b'\222A\253\0012\236\001Entity ID of the vCenter on which the datastore exists. This ID is used to communicate with Magneto to fetch user provided data such as username and password.\242\002\007integer'
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['action']._serialized_options = b'\222A)2\'Action to be taken on VMware datastore.'
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['mount_nas_datastore_params']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['mount_nas_datastore_params']._serialized_options = b'\222A-2+Parameters to mount a VMware NAS datastore.'
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['unmount_nas_datastore_params']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG'].fields_by_name['unmount_nas_datastore_params']._serialized_options = b'\222A/2-Parameters to unmount a VMware NAS datastore.'
  _globals['_VMWAREDATASTOREACTIONARG']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONARG']._serialized_options = b'\222A\204\001\n\201\001*$Perform actions on VMware datastore.2YRequest to perform various actions on VMware datastore.Actions include create and delete.'
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['error']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['error']._serialized_options = b'\222Am2kAny error encountered while validating the task. If the task passed validation, this field will not be set.'
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['task_id']._serialized_options = b'\222A_2]Task ID of the datastore action request. This ID should be used to determine the task status.'
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONRESULT'].fields_by_name['action']._serialized_options = b'\222A#2!Action taken on VMware datastore.'
  _globals['_VMWAREDATASTOREACTIONRESULT']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONRESULT']._serialized_options = b'\222A~\n|*)Result of VMware datastore action request2OData returned by Magnus service on receiving a VMware datastore action request.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG'].fields_by_name['task_id']._serialized_options = b'\222AK2ITask ID returned to the client while submitting datastore action request.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG']._serialized_options = b'\222A\304\001\n\301\001*%VMware datastore task status argument2\227\001Check status of VMware datatstore task in Magnus. Clients can poll Magnus with this request to check if the appropriate datastore action has completed.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['task_id']._serialized_options = b'\222A*2(Task ID of the datastore action request.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['error']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['error']._serialized_options = b'\222A725Any error encountered by the task during its runtime.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['status']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['status']._serialized_options = b'\222A+2)The current status of the task in Magnus.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['action']._serialized_options = b'\222A02.Action type for this task on VMware datastore.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['mount_nas_datastore_result']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT'].fields_by_name['mount_nas_datastore_result']._serialized_options = b'\222A`2^VMware datastore mounted if this was a mount NAS datatstore request and the request succeeded.'
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT']._loaded_options = None
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT']._serialized_options = b'\222AR\nP*\034VMware datastore task status20Task status for VMware datastore action request.'
  _globals['_VMWARENETWORKTYPE']._loaded_options = None
  _globals['_VMWARENETWORKTYPE']._serialized_options = b'\222A-\n+*\023VMware network type2\024VMware Network type.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['resource_pool_moref']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['resource_pool_moref']._serialized_options = b'\222A\244\0012\241\001Managed Object Reference(MORef) of the VMware resource pool where this VM should be created. VM will be created on one of the hosts present in the resource pool.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['datastore_moref']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['datastore_moref']._serialized_options = b'\222A\\2ZManaged Object Reference(MORef) of the VMware datastore where VMware VM disks are present.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['vm_folder_name']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['vm_folder_name']._serialized_options = b'\222A422Name of the folder where the VM should be created.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['network_type']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['network_type']._serialized_options = b'\222A;29Network type of the network to be assocatied with the VM.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['network_moref']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['network_moref']._serialized_options = b'\222A\240\0012\235\001Managed Object Reference(MORef) of the vCenter network to which the VM adapters should be attached to. If this is not specified, VM adapters will be removed.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['cloned_view_name']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['cloned_view_name']._serialized_options = b'\222A<2:Name of the view where the backup VM disks were cloned to.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['cloned_view_data_dir_path']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['cloned_view_data_dir_path']._serialized_options = b'\222AL2JPath in the cloned view where VM disks and configutaion files are present.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['vm_name']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['vm_name']._serialized_options = b'\222A\0372\035Name of the VM to be created.'
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['datastore_name']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS'].fields_by_name['datastore_name']._serialized_options = b'\222A321Name of the datastore where VM disks are present.'
  _globals['_CREATEVMWAREVMPARAMS']._loaded_options = None
  _globals['_CREATEVMWAREVMPARAMS']._serialized_options = b'\222AL\nJ*\026Create VM on a vCenter20Request to create VM on vCenter given its config'
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['vm_moref']._serialized_options = b'\222A;29Managed Object Reference(MORef) of the VMware VM created.'
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['vm_uuid']._loaded_options = None
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['vm_uuid']._serialized_options = b'\222A422UUID of the created VMware VM assigned by vCenter.'
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['esxi_host_name']._loaded_options = None
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['esxi_host_name']._serialized_options = b'\222A321VMware ESXi hostname on which the VM was created.'
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['esxi_host_moref']._loaded_options = None
  _globals['_CREATEVMWAREVMRESULT'].fields_by_name['esxi_host_moref']._serialized_options = b'\222AO2MManaged Object Reference of the VMware ESXi host on which the VM was created.'
  _globals['_CREATEVMWAREVMRESULT']._loaded_options = None
  _globals['_CREATEVMWAREVMRESULT']._serialized_options = b'\222A0\n.*\tVMware VM2!Data associated with a VMWare VM.'
  _globals['_DELETEVMWAREVMPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_DELETEVMWAREVMPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AM2KManaged Object Reference(MORef) of the VMware VM which needs to be deleted.'
  _globals['_DELETEVMWAREVMPARAMS']._loaded_options = None
  _globals['_DELETEVMWAREVMPARAMS']._serialized_options = b'\222AM\nK*\026Delete VM on a vCenter21Request to delete a VM on vCenter given its MORef'
  _globals['_VMPOWERSTATUS']._loaded_options = None
  _globals['_VMPOWERSTATUS']._serialized_options = b'\222A5\n3*\017VM power status2 Power status for of a VMware VM.'
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AZ2XManaged Object Reference(MORef) of the VMware VM whose power status need to be altered. '
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS'].fields_by_name['power_status']._loaded_options = None
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS'].fields_by_name['power_status']._serialized_options = b'\222A,2*Power status to be set on the provided VM.'
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS']._loaded_options = None
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS']._serialized_options = b'\222A`\n^*#Power on/off a VM on VMware vCenter27Request to set power status for a VM on VMware vCenter.'
  _globals['_GUESTOS']._loaded_options = None
  _globals['_GUESTOS']._serialized_options = b'\222A,\n**\010Guest OS2\036Guest OS types of a VMware VM.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['mac_address']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['mac_address']._serialized_options = b'\222AL2JMAC Address for the VM network adapter whose settings need to be modified.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['use_static_ip']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['use_static_ip']._serialized_options = b'\222AK2IWhether static IP address must be deployed on a specific network adapter.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['ip_address']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['ip_address']._serialized_options = b'\222AY2WIP address to be deployed on a specific network adapter. It must be a valid IP address.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['netmask']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['netmask']._serialized_options = b'\222A725Netmask for the provided IP address for this adapter.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['gateway']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS'].fields_by_name['gateway']._serialized_options = b'\222A&2$Gateway IP address for this adapter.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222A_2]Managed Object Reference(MORef) of the VMware VM on which IP addresses need to be configured.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['adapter_ip_settings']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['adapter_ip_settings']._serialized_options = b'\222A\204\0022\201\002Per adapter IP settings for the provided VM. The number of adapters in the VM must match with the number of entries in the field. If the MAC address for the adapter is not specified, these settings are applied in the order of the network adapters in the VM.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['guest_os']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['guest_os']._serialized_options = b'\222AC2AGuest OS of the VMware VM where the network settings are changed.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['dns_servers']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['dns_servers']._serialized_options = b'\222A*2(List of DNS servers to be set in the VM.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['dns_suffixes']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['dns_suffixes']._serialized_options = b'\222A220List of DNS search suffixes to be set in the VM.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['domain_name']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['domain_name']._serialized_options = b'\222A`2^Name of the domain to be set in the VM. This is set only for VMs with guest OS of type kLinux.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['host_name']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS'].fields_by_name['host_name']._serialized_options = b'\222A^2\\Name of the host to be set in the VM. This is set only for VMs with guest OS of type kLinux.'
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS']._loaded_options = None
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS']._serialized_options = b'\222Aa\n_*\036Configure IP addresses on a VM2=Request to reconfigure a VMware VM with IP addresses provided'
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AT2RManaged Object Reference(MORef) of the VMware VM on which file needs to be pushed.'
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['vm_credentials']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['vm_credentials']._serialized_options = b'\222A*2(Credentials to authenticate with the VM.'
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['file_data']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['file_data']._serialized_options = b'\222AR2PThe contents of the file that needs to be pushed inside guest OS of a VMware VM.'
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['remote_file_path']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['remote_file_path']._serialized_options = b'\222A422Remoted path for the file. This is the path on VM.'
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['guest_os']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS'].fields_by_name['guest_os']._serialized_options = b'\222A?2=Guest OS of the VMware VM where this file needs to be pushed.'
  _globals['_PUSHFILEVMWAREVMPARAMS']._loaded_options = None
  _globals['_PUSHFILEVMWAREVMPARAMS']._serialized_options = b'\222A\211\001\n\206\001*&Push file into guest OS of a VMWare VM2\\Request to push a file e.g script inside a VMWare VM.  Guest OS Windows/Linux are supported.'
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AT2RManaged Object Reference(MORef) of the VMware VM on which file needs to be pushed.'
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['vm_credentials']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['vm_credentials']._serialized_options = b'\222A*2(Credentials to authenticate with the VM.'
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['working_directory_path']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['working_directory_path']._serialized_options = b'\222A=2;Working directory from where the program should be executed'
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['program_path']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['program_path']._serialized_options = b'\222A523Full path of the program that needs to be executed.'
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['program_args']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS'].fields_by_name['program_args']._serialized_options = b'\222A@2>Arguments to be provided for the program that needs to be run.'
  _globals['_RUNPROGRAMVMWAREVMPARAMS']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMPARAMS']._serialized_options = b'\222A\204\001\n\201\001*\032Run a program in VMWare VM2cRequest to run a program e.g script inside a VMWare VM. Guest OSes Windows and Linux are supported.'
  _globals['_RUNPROGRAMVMWAREVMRESULT'].fields_by_name['pid']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMRESULT'].fields_by_name['pid']._serialized_options = b'\222A523Process ID of the launched program in the guest OS.'
  _globals['_RUNPROGRAMVMWAREVMRESULT'].fields_by_name['exit_code']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMRESULT'].fields_by_name['exit_code']._serialized_options = b'\222Ad2bExit code of the prgram executed. Success code 0. All other exit codes will be treated as errors. '
  _globals['_RUNPROGRAMVMWAREVMRESULT']._loaded_options = None
  _globals['_RUNPROGRAMVMWAREVMRESULT']._serialized_options = b'\222A]\n[*%VMware VM guest OS program run status22Result of running a program in VMware VM guest OS.'
  _globals['_RELOCATEVMWAREVMPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_RELOCATEVMWAREVMPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AO2MManaged Object Reference(MORef) of the VMware VM which needs to be relocated.'
  _globals['_RELOCATEVMWAREVMPARAMS'].fields_by_name['target_datastore_moref']._loaded_options = None
  _globals['_RELOCATEVMWAREVMPARAMS'].fields_by_name['target_datastore_moref']._serialized_options = b'\222A927Target datastore to which the VM should be migrated to.'
  _globals['_RELOCATEVMWAREVMPARAMS']._loaded_options = None
  _globals['_RELOCATEVMWAREVMPARAMS']._serialized_options = b'\222A\200\001\n~*\022Relocate VMWare VM2hRequest to relocate a VMware VM from its current datastore to target datastore specified in the request.'
  _globals['_RELOCATEVMWAREVMRESULT'].fields_by_name['progress_percentage']._loaded_options = None
  _globals['_RELOCATEVMWAREVMRESULT'].fields_by_name['progress_percentage']._serialized_options = b'\222A523Progress percentage of the vMotion task for the VM.'
  _globals['_RELOCATEVMWAREVMRESULT'].fields_by_name['task_moref']._loaded_options = None
  _globals['_RELOCATEVMWAREVMRESULT'].fields_by_name['task_moref']._serialized_options = b'\222A624Managed object reference of the VMware vMotion task.'
  _globals['_RELOCATEVMWAREVMRESULT']._loaded_options = None
  _globals['_RELOCATEVMWAREVMRESULT']._serialized_options = b'\222AZ\nX*\031Relocate VMWare VM status2;Result of relocate VMware VM task and its current progress.'
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS'].fields_by_name['vm_moref']._loaded_options = None
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS'].fields_by_name['vm_moref']._serialized_options = b'\222AX2VManaged Object Reference(MORef) of the VMware VM whose credentials need to be checked.'
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS'].fields_by_name['vm_credentials']._loaded_options = None
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS'].fields_by_name['vm_credentials']._serialized_options = b'\222A*2(Credentials to authenticate with the VM.'
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS']._loaded_options = None
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS']._serialized_options = b'\222AW\nU*\033Check VMware VM credentials26Request to check username and password of a VMware VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['task_id']._serialized_options = b'\222A\304\0012\301\001Client provided Task ID. This is expected to be unique among all task requests that are submitted to Magnus. Clients can fetch the status of the task using this task ID if the task is accepted.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['registered_vcenter_id']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['registered_vcenter_id']._serialized_options = b'\222A\256\0012\241\001Entity ID of the vCenter on which the VM is to be created. This ID is used to communicate with Magneto to fetch user provided data such as username and password.\242\002\007integer'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['action']._serialized_options = b'\222Ad2bAction to be taken for a VMware VM. These include create,delete, reconfiguration, relocation etc. '
  _globals['_VMWAREVMACTIONARG'].fields_by_name['create_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['create_params']._serialized_options = b'\222Ac2aIf this is a create request, this field specifies the parameters required for creation of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['delete_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['delete_params']._serialized_options = b'\222Ac2aIf this is a delete request, this field specifies the parameters required for deletion of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['reconfigure_ip_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['reconfigure_ip_params']._serialized_options = b'\222A\223\0012\220\001If this is a reconfiguration IP address request, this field specifies the parameters required for re-configuring each network adapter of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['power_status_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['power_status_params']._serialized_options = b'\222A\217\0012\214\001If this is a request to set VM power status, then this field specifies the parameters required for setting different power states of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['push_file_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['push_file_params']._serialized_options = b'\222A\206\0012\203\001If this is a push file request, this field specifies the parameters required for pushing a single file into the guest OS of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['run_program_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['run_program_params']._serialized_options = b'\222A\205\0012\202\001If this is a start program request, this field specifies the parameters required for starting a process in the guest OS of the VM.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['relocate_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['relocate_params']._serialized_options = b'\222A\213\0012\210\001If this is a relocate VM request, this field specifies the parameters required for relocating a VMware VM from one datastore to another.'
  _globals['_VMWAREVMACTIONARG'].fields_by_name['check_credentials_params']._loaded_options = None
  _globals['_VMWAREVMACTIONARG'].fields_by_name['check_credentials_params']._serialized_options = b'\222A\214\0012\211\001For a check VM credentials request, this field specifies the parameters required for validating the username and password for a given VM.'
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['error']._loaded_options = None
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['error']._serialized_options = b'\222Am2kAny error encountered while validating the task. If the task passed validation, this field will not be set.'
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['task_id']._serialized_options = b'\222A_2]Task ID of the VMware VM action request. This ID should be used to determine the task status.'
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREVMACTIONRESULT'].fields_by_name['action']._serialized_options = b'\222A02.Action taken for a VMware VM for this task ID.'
  _globals['_VMWAREVMACTIONRESULT']._loaded_options = None
  _globals['_VMWAREVMACTIONRESULT']._serialized_options = b'\222Af\nd*\030VMware VM action request2HData returned by Magnus service on receiving a VMware VM action request.'
  _globals['_VMWAREVMACTIONTASKSTATUSARG'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSARG'].fields_by_name['task_id']._serialized_options = b'\222AK2ITask ID returned to the client while submitting VMware VM action request.'
  _globals['_VMWAREVMACTIONTASKSTATUSARG']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSARG']._serialized_options = b'\222AT\nR*%VMware VM action task status argument2)Check status of VMware VM task in Magnus.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['task_id']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['task_id']._serialized_options = b'\222AK2ITask ID returned to the client while submitting VMware VM action request.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['status']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['status']._serialized_options = b'\222A+2)The current status of the task in Magnus.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['error']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['error']._serialized_options = b'\222A725Any error encountered by the task during its runtime.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['action']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['action']._serialized_options = b'\222A02.Action taken for a VMware VM for this task ID.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['create_result']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['create_result']._serialized_options = b'\222A\204\0012\201\001If this was create VM was request, this field contains the resulting data from the request if the task was successfully finished.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['relocate_result']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['relocate_result']._serialized_options = b'\222Al2jIf this was relocate VM was request, this field contains the progress of storage vMotion of the VMware VM.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['run_program_result']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT'].fields_by_name['run_program_result']._serialized_options = b'\222At2rIf this was run program VM was request, this field contains the PID and the exit code of the program that was run.'
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT']._loaded_options = None
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT']._serialized_options = b'\222AM\nK*\034VMware VM action task status2+Current status of VMware VM task in Magnus.'
  _globals['_MOUNTVMWARENASDATASTOREPARAMS']._serialized_start=191
  _globals['_MOUNTVMWARENASDATASTOREPARAMS']._serialized_end=1102
  _globals['_MOUNTVMWARENASDATASTORERESULT']._serialized_start=1105
  _globals['_MOUNTVMWARENASDATASTORERESULT']._serialized_end=1452
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS']._serialized_start=1455
  _globals['_UNMOUNTVMWARENASDATASTOREPARAMS']._serialized_end=1849
  _globals['_VMWAREDATASTOREACTION']._serialized_start=1851
  _globals['_VMWAREDATASTOREACTION']._serialized_end=1932
  _globals['_VMWAREDATASTOREACTION_TYPE']._serialized_start=1876
  _globals['_VMWAREDATASTOREACTION_TYPE']._serialized_end=1932
  _globals['_VMWAREDATASTOREACTIONARG']._serialized_start=1935
  _globals['_VMWAREDATASTOREACTIONARG']._serialized_end=2935
  _globals['_VMWAREDATASTOREACTIONRESULT']._serialized_start=2938
  _globals['_VMWAREDATASTOREACTIONRESULT']._serialized_end=3483
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG']._serialized_start=3486
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSARG']._serialized_end=3822
  _globals['_TASKSTATUS']._serialized_start=3824
  _globals['_TASKSTATUS']._serialized_end=3888
  _globals['_TASKSTATUS_TYPE']._serialized_start=3838
  _globals['_TASKSTATUS_TYPE']._serialized_end=3888
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT']._serialized_start=3891
  _globals['_VMWAREDATASTOREACTIONTASKSTATUSRESULT']._serialized_end=4604
  _globals['_VMWARENETWORKTYPE']._serialized_start=4606
  _globals['_VMWARENETWORKTYPE']._serialized_end=4731
  _globals['_VMWARENETWORKTYPE_TYPE']._serialized_start=4627
  _globals['_VMWARENETWORKTYPE_TYPE']._serialized_end=4681
  _globals['_CREATEVMWAREVMPARAMS']._serialized_start=4734
  _globals['_CREATEVMWAREVMPARAMS']._serialized_end=5907
  _globals['_CREATEVMWAREVMRESULT']._serialized_start=5910
  _globals['_CREATEVMWAREVMRESULT']._serialized_end=6330
  _globals['_DELETEVMWAREVMPARAMS']._serialized_start=6333
  _globals['_DELETEVMWAREVMPARAMS']._serialized_end=6537
  _globals['_VMPOWERSTATUS']._serialized_start=6539
  _globals['_VMPOWERSTATUS']._serialized_end=6649
  _globals['_VMPOWERSTATUS_TYPE']._serialized_start=6556
  _globals['_VMPOWERSTATUS_TYPE']._serialized_end=6591
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS']._serialized_start=6652
  _globals['_SETVMWAREVMPOWERSTATUSPARAMS']._serialized_end=7011
  _globals['_GUESTOS']._serialized_start=7013
  _globals['_GUESTOS']._serialized_end=7105
  _globals['_GUESTOS_TYPE']._serialized_start=7024
  _globals['_GUESTOS_TYPE']._serialized_end=7056
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS']._serialized_start=7108
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS']._serialized_end=8712
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS']._serialized_start=8142
  _globals['_CONFIGUREVMWAREVMIPADDRESSPARAMS_IPSETTINGS']._serialized_end=8610
  _globals['_PUSHFILEVMWAREVMPARAMS']._serialized_start=8715
  _globals['_PUSHFILEVMWAREVMPARAMS']._serialized_end=9411
  _globals['_RUNPROGRAMVMWAREVMPARAMS']._serialized_start=9414
  _globals['_RUNPROGRAMVMWAREVMPARAMS']._serialized_end=10063
  _globals['_RUNPROGRAMVMWAREVMRESULT']._serialized_start=10066
  _globals['_RUNPROGRAMVMWAREVMRESULT']._serialized_end=10385
  _globals['_RELOCATEVMWAREVMPARAMS']._serialized_start=10388
  _globals['_RELOCATEVMWAREVMPARAMS']._serialized_end=10743
  _globals['_RELOCATEVMWAREVMRESULT']._serialized_start=10746
  _globals['_RELOCATEVMWAREVMRESULT']._serialized_end=11031
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS']._serialized_start=11034
  _globals['_CHECKVMWAREVMCREDENTIALSPARAMS']._serialized_end=11377
  _globals['_VMWAREVMACTION']._serialized_start=11380
  _globals['_VMWAREVMACTION']._serialized_end=11539
  _globals['_VMWAREVMACTION_TYPE']._serialized_start=11399
  _globals['_VMWAREVMACTION_TYPE']._serialized_end=11539
  _globals['_VMWAREVMACTIONARG']._serialized_start=11542
  _globals['_VMWAREVMACTIONARG']._serialized_end=13881
  _globals['_VMWAREVMACTIONRESULT']._serialized_start=13884
  _globals['_VMWAREVMACTIONRESULT']._serialized_end=14403
  _globals['_VMWAREVMACTIONTASKSTATUSARG']._serialized_start=14406
  _globals['_VMWAREVMACTIONTASKSTATUSARG']._serialized_end=14621
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT']._serialized_start=14624
  _globals['_VMWAREVMACTIONTASKSTATUSRESULT']._serialized_end=15754
# @@protoc_insertion_point(module_scope)
