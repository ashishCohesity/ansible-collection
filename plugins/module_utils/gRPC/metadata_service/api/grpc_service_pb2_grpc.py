# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from metadata_service.api import api_pb2 as metadata__service_dot_api_dot_api__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in metadata_service/api/grpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GRpcServiceStub(object):
    """MDS gRPC service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrUpdateGraph = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/CreateOrUpdateGraph',
                request_serializer=metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphResult.FromString,
                _registered_method=True)
        self.CreateTransactionContext = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/CreateTransactionContext',
                request_serializer=metadata__service_dot_api_dot_api__pb2.CreateTransactionContextArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.CreateTransactionContextResult.FromString,
                _registered_method=True)
        self.CommitTransaction = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/CommitTransaction',
                request_serializer=metadata__service_dot_api_dot_api__pb2.CommitTransactionArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.CommitTransactionResult.FromString,
                _registered_method=True)
        self.ReserveUniversalIds = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/ReserveUniversalIds',
                request_serializer=metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsResult.FromString,
                _registered_method=True)
        self.AddBatchToTransaction = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/AddBatchToTransaction',
                request_serializer=metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionResult.FromString,
                _registered_method=True)
        self.LookupNodes = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/LookupNodes',
                request_serializer=metadata__service_dot_api_dot_api__pb2.LookupNodesArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.LookupNodesResult.FromString,
                _registered_method=True)
        self.TraverseNeighborsOfNode = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/TraverseNeighborsOfNode',
                request_serializer=metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeResult.FromString,
                _registered_method=True)
        self.FetchDag = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/FetchDag',
                request_serializer=metadata__service_dot_api_dot_api__pb2.FetchDagArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.FetchDagResult.FromString,
                _registered_method=True)
        self.TraverseDag = channel.unary_unary(
                '/cohesity.metadata_service.api.GRpcService/TraverseDag',
                request_serializer=metadata__service_dot_api_dot_api__pb2.TraverseDagArg.SerializeToString,
                response_deserializer=metadata__service_dot_api_dot_api__pb2.TraverseDagResult.FromString,
                _registered_method=True)


class GRpcServiceServicer(object):
    """MDS gRPC service definition.
    """

    def CreateOrUpdateGraph(self, request, context):
        """Create or update a Graph.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTransactionContext(self, request, context):
        """Create a transaction context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """Commit or abort transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveUniversalIds(self, request, context):
        """Reserve a set of universal ids.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBatchToTransaction(self, request, context):
        """Send a batch of updates to MDS.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookupNodes(self, request, context):
        """Lookup a set of nodes by their universal ids or a filter on the node type,
        labels or attributes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TraverseNeighborsOfNode(self, request, context):
        """Traverse the neighbors of a given node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchDag(self, request, context):
        """Fetch the DAG rooted at a given node. The DAG is constructed w.r.t. the
        given edge type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TraverseDag(self, request, context):
        """Traverse the DAG rooted at a given node. The DAG is constructed w.r.t. the
        given edge type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrUpdateGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrUpdateGraph,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphResult.SerializeToString,
            ),
            'CreateTransactionContext': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTransactionContext,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.CreateTransactionContextArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.CreateTransactionContextResult.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.CommitTransactionArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.CommitTransactionResult.SerializeToString,
            ),
            'ReserveUniversalIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveUniversalIds,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsResult.SerializeToString,
            ),
            'AddBatchToTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBatchToTransaction,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionResult.SerializeToString,
            ),
            'LookupNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupNodes,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.LookupNodesArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.LookupNodesResult.SerializeToString,
            ),
            'TraverseNeighborsOfNode': grpc.unary_unary_rpc_method_handler(
                    servicer.TraverseNeighborsOfNode,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeResult.SerializeToString,
            ),
            'FetchDag': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchDag,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.FetchDagArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.FetchDagResult.SerializeToString,
            ),
            'TraverseDag': grpc.unary_unary_rpc_method_handler(
                    servicer.TraverseDag,
                    request_deserializer=metadata__service_dot_api_dot_api__pb2.TraverseDagArg.FromString,
                    response_serializer=metadata__service_dot_api_dot_api__pb2.TraverseDagResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.metadata_service.api.GRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.metadata_service.api.GRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GRpcService(object):
    """MDS gRPC service definition.
    """

    @staticmethod
    def CreateOrUpdateGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/CreateOrUpdateGraph',
            metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.CreateOrUpdateGraphResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTransactionContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/CreateTransactionContext',
            metadata__service_dot_api_dot_api__pb2.CreateTransactionContextArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.CreateTransactionContextResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/CommitTransaction',
            metadata__service_dot_api_dot_api__pb2.CommitTransactionArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.CommitTransactionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReserveUniversalIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/ReserveUniversalIds',
            metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.ReserveUniversalIdsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddBatchToTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/AddBatchToTransaction',
            metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.AddBatchToTransactionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookupNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/LookupNodes',
            metadata__service_dot_api_dot_api__pb2.LookupNodesArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.LookupNodesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TraverseNeighborsOfNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/TraverseNeighborsOfNode',
            metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.TraverseNeighborsOfNodeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchDag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/FetchDag',
            metadata__service_dot_api_dot_api__pb2.FetchDagArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.FetchDagResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TraverseDag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.metadata_service.api.GRpcService/TraverseDag',
            metadata__service_dot_api_dot_api__pb2.TraverseDagArg.SerializeToString,
            metadata__service_dot_api_dot_api__pb2.TraverseDagResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
