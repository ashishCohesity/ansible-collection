# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from pigeon.stub import rpc_param_pb2 as pigeon_dot_stub_dot_rpc__param__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pigeon/stub/rpc_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    RPC service used by pigeon.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryRemoteClusterInfo = channel.unary_unary(
                '/cohesity.pigeon.stub.RpcService/QueryRemoteClusterInfo',
                request_serializer=pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoArg.SerializeToString,
                response_deserializer=pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoResult.FromString,
                _registered_method=True)
        self.RemoteRequest = channel.unary_unary(
                '/cohesity.pigeon.stub.RpcService/RemoteRequest',
                request_serializer=pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestArg.SerializeToString,
                response_deserializer=pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    RPC service used by pigeon.
    """

    def QueryRemoteClusterInfo(self, request, context):
        """Query the cluster id and cluster incarnation id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteRequest(self, request, context):
        """Send a request to an endpoint in a remote cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryRemoteClusterInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRemoteClusterInfo,
                    request_deserializer=pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoArg.FromString,
                    response_serializer=pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoResult.SerializeToString,
            ),
            'RemoteRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteRequest,
                    request_deserializer=pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestArg.FromString,
                    response_serializer=pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.pigeon.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.pigeon.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    RPC service used by pigeon.
    """

    @staticmethod
    def QueryRemoteClusterInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.pigeon.stub.RpcService/QueryRemoteClusterInfo',
            pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoArg.SerializeToString,
            pigeon_dot_stub_dot_rpc__param__pb2.QueryRemoteClusterInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.pigeon.stub.RpcService/RemoteRequest',
            pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestArg.SerializeToString,
            pigeon_dot_stub_dot_rpc__param__pb2.RemoteRequestResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
