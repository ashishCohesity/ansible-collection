# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: scribe/base/scribe.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from util.base import op_clock_pb2 as util_dot_base_dot_op__clock__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18scribe/base/scribe.proto\x12\x0f\x63ohesity.scribe\x1a\x18util/base/op_clock.proto\"0\n\x0cRowColumnKey\x12\x0f\n\x07int_key\x18\x01 \x01(\x03\x12\x0f\n\x07str_key\x18\x02 \x01(\x0c\"/\n\x0eSequencerProto\x12\x10\n\x04high\x18\x01 \x01(\x03:\x02-1\x12\x0b\n\x03low\x18\x02 \x01(\x04\"\xcf\x02\n\x07RowData\x12*\n\x03key\x18\x01 \x02(\x0b\x32\x1d.cohesity.scribe.RowColumnKey\x12\x38\n\x0b\x63olumn_data\x18\x02 \x03(\x0b\x32#.cohesity.scribe.RowData.ColumnData\x1a\xdd\x01\n\nColumnData\x12+\n\x04name\x18\x01 \x02(\x0b\x32\x1d.cohesity.scribe.RowColumnKey\x12>\n\x05value\x18\x02 \x01(\x0b\x32/.cohesity.scribe.RowData.ColumnData.ColumnValue\x1a\x62\n\x0b\x43olumnValue\x12\x19\n\x11payload_data_size\x18\x01 \x01(\x05\x12\x16\n\x0epayload_offset\x18\x02 \x01(\x05\x12 \n\x18payload_adler32_checksum\x18\x03 \x01(\r\"\xc3\x01\n\x08RowRange\x12*\n\x03key\x18\x01 \x01(\x0b\x32\x1d.cohesity.scribe.RowColumnKey\x12\x30\n\tstart_key\x18\x02 \x01(\x0b\x32\x1d.cohesity.scribe.RowColumnKey\x12.\n\x07\x65nd_key\x18\x03 \x01(\x0b\x32\x1d.cohesity.scribe.RowColumnKey\x12\x11\n\tlist_only\x18\x04 \x01(\x08\x12\x16\n\x07reverse\x18\x05 \x01(\x08:\x05\x66\x61lse\"\xd8\x01\n\rReadRowResult\x12*\n\x08row_data\x18\x01 \x01(\x0b\x32\x18.cohesity.scribe.RowData\x12\x32\n\tsequencer\x18\x02 \x01(\x0b\x32\x1f.cohesity.scribe.SequencerProto\x12\x0f\n\x07version\x18\x03 \x01(\x03\x12\'\n\x0cop_clock_vec\x18\x04 \x03(\x0b\x32\x11.cohesity.OpClock\x12\x19\n\nis_deleted\x18\x05 \x01(\x08:\x05\x66\x61lse\x12\x12\n\nreason_vec\x18\x06 \x03(\x0c\"s\n\x0fScribeQoSParams\x12\x18\n\x0cprincipal_id\x18\x01 \x01(\x03:\x02-1\x12\x11\n\x06weight\x18\x02 \x01(\x05:\x01\x31\x12\x1e\n\x16min_requests_executing\x18\x03 \x01(\x05\x12\x13\n\x0b\x63lient_name\x18\x04 \x01(\t*k\n\x14RangeScanConsistency\x12\x0f\n\x0bkConsistent\x10\x00\x12\x13\n\x0fkInconsistentOk\x10\x02\x12\x1e\n\x1akSmallTableUrgentRangeScan\x10\x03\x12\r\n\tkReserved\x10\x01\x42\x03\xf8\x01\x01')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'scribe.base.scribe_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\370\001\001'
  _globals['_RANGESCANCONSISTENCY']._serialized_start=1042
  _globals['_RANGESCANCONSISTENCY']._serialized_end=1149
  _globals['_ROWCOLUMNKEY']._serialized_start=71
  _globals['_ROWCOLUMNKEY']._serialized_end=119
  _globals['_SEQUENCERPROTO']._serialized_start=121
  _globals['_SEQUENCERPROTO']._serialized_end=168
  _globals['_ROWDATA']._serialized_start=171
  _globals['_ROWDATA']._serialized_end=506
  _globals['_ROWDATA_COLUMNDATA']._serialized_start=285
  _globals['_ROWDATA_COLUMNDATA']._serialized_end=506
  _globals['_ROWDATA_COLUMNDATA_COLUMNVALUE']._serialized_start=408
  _globals['_ROWDATA_COLUMNDATA_COLUMNVALUE']._serialized_end=506
  _globals['_ROWRANGE']._serialized_start=509
  _globals['_ROWRANGE']._serialized_end=704
  _globals['_READROWRESULT']._serialized_start=707
  _globals['_READROWRESULT']._serialized_end=923
  _globals['_SCRIBEQOSPARAMS']._serialized_start=925
  _globals['_SCRIBEQOSPARAMS']._serialized_end=1040
# @@protoc_insertion_point(module_scope)
