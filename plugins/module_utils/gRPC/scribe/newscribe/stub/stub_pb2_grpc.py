# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from scribe.newscribe.stub import stub_pb2 as scribe_dot_newscribe_dot_stub_dot_stub__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in scribe/newscribe/stub/stub_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/Read',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadResult.FromString,
                _registered_method=True)
        self.RangeScan = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/RangeScan',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanResult.FromString,
                _registered_method=True)
        self.Write = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/Write',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteResult.FromString,
                _registered_method=True)
        self.BulkWrite = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/BulkWrite',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
                _registered_method=True)
        self.BulkWriteTransaction = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/BulkWriteTransaction',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
                _registered_method=True)
        self.WriteTransactionBatch = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/WriteTransactionBatch',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
                _registered_method=True)
        self.DeleteRange = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/DeleteRange',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeResult.FromString,
                _registered_method=True)
        self.BulkWriteForMigration = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/BulkWriteForMigration',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationResult.FromString,
                _registered_method=True)
        self.GetDebugInfo = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/GetDebugInfo',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoResult.FromString,
                _registered_method=True)
        self.GetTableInfoInBucket = channel.unary_unary(
                '/cohesity.scribe.server.stub.RpcService/GetTableInfoInBucket',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketResult.FromString,
                _registered_method=True)


class RpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RangeScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkWriteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteTransactionBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkWriteForMigration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDebugInfo(self, request, context):
        """RPC to get internal row metadata for a particular row.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableInfoInBucket(self, request, context):
        """RPC to get table info. in a bucket.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadResult.SerializeToString,
            ),
            'RangeScan': grpc.unary_unary_rpc_method_handler(
                    servicer.RangeScan,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanResult.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteResult.SerializeToString,
            ),
            'BulkWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkWrite,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.SerializeToString,
            ),
            'BulkWriteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkWriteTransaction,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.SerializeToString,
            ),
            'WriteTransactionBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteTransactionBatch,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.SerializeToString,
            ),
            'DeleteRange': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRange,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeResult.SerializeToString,
            ),
            'BulkWriteForMigration': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkWriteForMigration,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationResult.SerializeToString,
            ),
            'GetDebugInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDebugInfo,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoResult.SerializeToString,
            ),
            'GetTableInfoInBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableInfoInBucket,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.scribe.server.stub.RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.scribe.server.stub.RpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/Read',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.ReadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RangeScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/RangeScan',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.RangeScanResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/Write',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.WriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/BulkWrite',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkWriteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/BulkWriteTransaction',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteTransactionBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/WriteTransactionBatch',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteTransactionArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/DeleteRange',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteRangeResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkWriteForMigration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/BulkWriteForMigration',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.BulkWriteForMigrationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDebugInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/GetDebugInfo',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetDebugInfoResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTableInfoInBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.RpcService/GetTableInfoInBucket',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetTableInfoInBucketResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MasterRpcServiceStub(object):
    """-----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeleteTable = channel.unary_unary(
                '/cohesity.scribe.server.stub.MasterRpcService/DeleteTable',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableResult.FromString,
                _registered_method=True)
        self.GetBucketLeader = channel.unary_unary(
                '/cohesity.scribe.server.stub.MasterRpcService/GetBucketLeader',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderResult.FromString,
                _registered_method=True)
        self.ShuffleBucketsForTest = channel.unary_unary(
                '/cohesity.scribe.server.stub.MasterRpcService/ShuffleBucketsForTest',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestResult.FromString,
                _registered_method=True)
        self.GetClusterCapacity = channel.unary_unary(
                '/cohesity.scribe.server.stub.MasterRpcService/GetClusterCapacity',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityResult.FromString,
                _registered_method=True)
        self.GetShuffleProgress = channel.unary_unary(
                '/cohesity.scribe.server.stub.MasterRpcService/GetShuffleProgress',
                request_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressArg.SerializeToString,
                response_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressResult.FromString,
                _registered_method=True)


class MasterRpcServiceServicer(object):
    """-----------------------------------------------------------------------------

    """

    def DeleteTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBucketLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShuffleBucketsForTest(self, request, context):
        """Used only in tests. Message sent to ask master to shuffle all buckets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterCapacity(self, request, context):
        """API to get total scribe cluster capacity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShuffleProgress(self, request, context):
        """API to get the progress of shuffle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeleteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTable,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableResult.SerializeToString,
            ),
            'GetBucketLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBucketLeader,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderResult.SerializeToString,
            ),
            'ShuffleBucketsForTest': grpc.unary_unary_rpc_method_handler(
                    servicer.ShuffleBucketsForTest,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestResult.SerializeToString,
            ),
            'GetClusterCapacity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterCapacity,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityResult.SerializeToString,
            ),
            'GetShuffleProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShuffleProgress,
                    request_deserializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressArg.FromString,
                    response_serializer=scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.scribe.server.stub.MasterRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.scribe.server.stub.MasterRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterRpcService(object):
    """-----------------------------------------------------------------------------

    """

    @staticmethod
    def DeleteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.MasterRpcService/DeleteTable',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.DeleteTableResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBucketLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.MasterRpcService/GetBucketLeader',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetBucketLeaderResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShuffleBucketsForTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.MasterRpcService/ShuffleBucketsForTest',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.ShuffleBucketsForTestResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterCapacity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.MasterRpcService/GetClusterCapacity',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetClusterCapacityResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetShuffleProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.scribe.server.stub.MasterRpcService/GetShuffleProgress',
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressArg.SerializeToString,
            scribe_dot_newscribe_dot_stub_dot_stub__pb2.GetShuffleProgressResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
