# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from workqueue.stub import workqueue_service_args_pb2 as workqueue_dot_stub_dot_workqueue__service__args__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in workqueue/stub/workqueue_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class WorkqueueWorkerRpcServiceStub(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue worker.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchIncarnationId = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/FetchIncarnationId',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdResult.FromString,
                _registered_method=True)
        self.RegisterWorker = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/RegisterWorker',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerResult.FromString,
                _registered_method=True)
        self.WorkerToServerHeartbeat = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/WorkerToServerHeartbeat',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatResult.FromString,
                _registered_method=True)
        self.WorkerToServerUpdate = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/WorkerToServerUpdate',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateResult.FromString,
                _registered_method=True)
        self.FetchUpdateFromServer = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/FetchUpdateFromServer',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerResult.FromString,
                _registered_method=True)


class WorkqueueWorkerRpcServiceServicer(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue worker.

    """

    def FetchIncarnationId(self, request, context):
        """Used by worker to fetch a monotonically increasing id from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Register worker with workqueue service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerToServerHeartbeat(self, request, context):
        """RPC used by worker to send a periodic heartbeat to server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerToServerUpdate(self, request, context):
        """RPC used by worker to send updates about active tasks on the worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchUpdateFromServer(self, request, context):
        """RPC used by worker to fetch any work from server. This RPC is kept on
        hold by the server and result is returned when there is data available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkqueueWorkerRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchIncarnationId': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchIncarnationId,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdResult.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerResult.SerializeToString,
            ),
            'WorkerToServerHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerToServerHeartbeat,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatResult.SerializeToString,
            ),
            'WorkerToServerUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkerToServerUpdate,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateResult.SerializeToString,
            ),
            'FetchUpdateFromServer': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchUpdateFromServer,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.workqueue.stub.WorkqueueWorkerRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.workqueue.stub.WorkqueueWorkerRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkqueueWorkerRpcService(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue worker.

    """

    @staticmethod
    def FetchIncarnationId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/FetchIncarnationId',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchIncarnationIdResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/RegisterWorker',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.RegisterWorkerResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WorkerToServerHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/WorkerToServerHeartbeat',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerHeartbeatResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WorkerToServerUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/WorkerToServerUpdate',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.WorkerToServerUpdateResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchUpdateFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueWorkerRpcService/FetchUpdateFromServer',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.FetchUpdateFromServerResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkqueueClientRpcServiceStub(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue client.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTaskGroup = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/CreateTaskGroup',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupResult.FromString,
                _registered_method=True)
        self.DeleteTaskGroup = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/DeleteTaskGroup',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupResult.FromString,
                _registered_method=True)
        self.AddTask = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/AddTask',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskResult.FromString,
                _registered_method=True)
        self.SubmitTasks = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/SubmitTasks',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksResult.FromString,
                _registered_method=True)
        self.GetTaskGroupSummary = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskGroupSummary',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryResult.FromString,
                _registered_method=True)
        self.GetTaskResult = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskResult',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultResult.FromString,
                _registered_method=True)
        self.GetAllTaskResult = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetAllTaskResult',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultResult.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/CancelTask',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskResult.FromString,
                _registered_method=True)
        self.CancelTaskGroup = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/CancelTaskGroup',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupResult.FromString,
                _registered_method=True)
        self.GetTaskCompletionNotification = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskCompletionNotification',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationResult.FromString,
                _registered_method=True)
        self.DestroyFinishedTask = channel.unary_unary(
                '/cohesity.workqueue.stub.WorkqueueClientRpcService/DestroyFinishedTask',
                request_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskArg.SerializeToString,
                response_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskResult.FromString,
                _registered_method=True)


class WorkqueueClientRpcServiceServicer(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue client.

    """

    def CreateTaskGroup(self, request, context):
        """Create a task group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTaskGroup(self, request, context):
        """Delete a task group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTask(self, request, context):
        """Add a task to task group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTasks(self, request, context):
        """Submit a task group to run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskGroupSummary(self, request, context):
        """Get task group summary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskResult(self, request, context):
        """Get the status of a task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTaskResult(self, request, context):
        """Get the status of a task group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Cancel a task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTaskGroup(self, request, context):
        """Cancel a task group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskCompletionNotification(self, request, context):
        """Get task completion notification.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyFinishedTask(self, request, context):
        """Destroy finished task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkqueueClientRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTaskGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTaskGroup,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupResult.SerializeToString,
            ),
            'DeleteTaskGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTaskGroup,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupResult.SerializeToString,
            ),
            'AddTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTask,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskResult.SerializeToString,
            ),
            'SubmitTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTasks,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksResult.SerializeToString,
            ),
            'GetTaskGroupSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskGroupSummary,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryResult.SerializeToString,
            ),
            'GetTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskResult,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultResult.SerializeToString,
            ),
            'GetAllTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTaskResult,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultResult.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskResult.SerializeToString,
            ),
            'CancelTaskGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTaskGroup,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupResult.SerializeToString,
            ),
            'GetTaskCompletionNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskCompletionNotification,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationResult.SerializeToString,
            ),
            'DestroyFinishedTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyFinishedTask,
                    request_deserializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskArg.FromString,
                    response_serializer=workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cohesity.workqueue.stub.WorkqueueClientRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cohesity.workqueue.stub.WorkqueueClientRpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkqueueClientRpcService(object):
    """-----------------------------------------------------------------------------
    Set of APIs exposed by workqueue server for workqueue client.

    """

    @staticmethod
    def CreateTaskGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/CreateTaskGroup',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CreateTaskGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTaskGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/DeleteTaskGroup',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.DeleteTaskGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/AddTask',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.AddTaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/SubmitTasks',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.SubmitTasksResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskGroupSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskGroupSummary',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskGroupSummaryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskResult',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskResultResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetAllTaskResult',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetAllTaskResultResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/CancelTask',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTaskGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/CancelTaskGroup',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.CancelTaskGroupResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskCompletionNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/GetTaskCompletionNotification',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.GetTaskCompletionNotificationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyFinishedTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cohesity.workqueue.stub.WorkqueueClientRpcService/DestroyFinishedTask',
            workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskArg.SerializeToString,
            workqueue_dot_stub_dot_workqueue__service__args__pb2.DestroyFinishedTaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
